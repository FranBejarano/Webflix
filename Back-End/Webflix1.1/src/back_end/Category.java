/*
 * Category class which held the categories in which the movies and tv shows
 * could be embedded
 */
package back_end;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 * @author Francisco Jose Bejarano Escano
 * EC1825088
 * @date 29/04/2022
 * @location Edinburgh
 * @version 1.1
 */
public class Category extends javax.swing.JPanel {
    
    /**
     * Creates new form User
     */
    public Category() {
        initComponents();
        
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        catPanel = new javax.swing.JPanel();
        lbCatPnl = new javax.swing.JLabel();
        lblCatSearch = new javax.swing.JLabel();
        txtCatSearch = new javax.swing.JTextField();
        btnCatSearch = new javax.swing.JButton();
        lblCatName = new javax.swing.JLabel();
        txtCatName = new javax.swing.JTextField();
        lbCatDescrip = new javax.swing.JLabel();
        btnCatAdd = new javax.swing.JButton();
        btnCatSave = new javax.swing.JButton();
        btnCatCancel = new javax.swing.JButton();
        btnCatList = new javax.swing.JButton();
        btnCatDelete = new javax.swing.JButton();
        btnCatEdit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCatDescrip = new javax.swing.JTextArea();

        setLayout(new java.awt.CardLayout());

        lbCatPnl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbCatPnl.setText("<HTML><u>Categories</u><HTML>");

        lblCatSearch.setText("Search by name");

        txtCatSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCatSearchKeyReleased(evt);
            }
        });

        btnCatSearch.setText("Search");
        btnCatSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatSearchActionPerformed(evt);
            }
        });

        lblCatName.setText("Name:");

        txtCatName.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCatName.setEnabled(false);

        lbCatDescrip.setText("Description:");

        btnCatAdd.setText("Add Category");
        btnCatAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatAddActionPerformed(evt);
            }
        });

        btnCatSave.setText("Save");
        btnCatSave.setEnabled(false);
        btnCatSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatSaveActionPerformed(evt);
            }
        });

        btnCatCancel.setText("Cancel");
        btnCatCancel.setEnabled(false);
        btnCatCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatCancelActionPerformed(evt);
            }
        });

        btnCatList.setText("List");
        btnCatList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatListActionPerformed(evt);
            }
        });

        btnCatDelete.setText("Delete");
        btnCatDelete.setEnabled(false);
        btnCatDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatDeleteActionPerformed(evt);
            }
        });

        btnCatEdit.setText("Edit");
        btnCatEdit.setEnabled(false);
        btnCatEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatEditActionPerformed(evt);
            }
        });

        txtCatDescrip.setColumns(20);
        txtCatDescrip.setRows(5);
        txtCatDescrip.setEnabled(false);
        jScrollPane1.setViewportView(txtCatDescrip);
        txtCatDescrip.setLineWrap(true);

        javax.swing.GroupLayout catPanelLayout = new javax.swing.GroupLayout(catPanel);
        catPanel.setLayout(catPanelLayout);
        catPanelLayout.setHorizontalGroup(
            catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lbCatPnl))
            .addGroup(catPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lblCatSearch)
                .addGap(18, 18, 18)
                .addComponent(txtCatSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCatSearch))
            .addGroup(catPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lblCatName)
                .addGap(73, 73, 73)
                .addComponent(txtCatName, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(catPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lbCatDescrip)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(catPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(btnCatAdd)
                .addGap(6, 6, 6)
                .addComponent(btnCatSave)
                .addGap(6, 6, 6)
                .addComponent(btnCatCancel)
                .addGap(6, 6, 6)
                .addComponent(btnCatList)
                .addGap(6, 6, 6)
                .addComponent(btnCatDelete)
                .addGap(6, 6, 6)
                .addComponent(btnCatEdit))
        );
        catPanelLayout.setVerticalGroup(
            catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lbCatPnl)
                .addGap(18, 18, 18)
                .addGroup(catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblCatSearch))
                    .addComponent(txtCatSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCatSearch))
                .addGap(38, 38, 38)
                .addGroup(catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblCatName))
                    .addComponent(txtCatName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCatDescrip)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCatAdd)
                    .addComponent(btnCatSave)
                    .addComponent(btnCatCancel)
                    .addComponent(btnCatList)
                    .addComponent(btnCatDelete)
                    .addComponent(btnCatEdit)))
        );

        add(catPanel, "card2");
    }// </editor-fold>//GEN-END:initComponents

//GEN-FIRST:event_btnAdminSaveActionPerformed
 
//GEN-LAST:event_btnAdminSaveActionPerformed

    /**
     * Action Event that enables all the editable fields of the category panel
     * @param evt 
     */
    private void btnCatEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatEditActionPerformed
        // TODO add your handling code here:
        enable();
        btnCatSave.setText("Update");
        btnCatAdd.setEnabled(false);
    }//GEN-LAST:event_btnCatEditActionPerformed

    /**
     * Delete from the database the details displayed in the screen
     * @param evt 
     */
    private void btnCatDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatDeleteActionPerformed

        // Instance of the ConnectMySQL class
        ConnectMySQL Con = new ConnectMySQL();

        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null,//parent container of JOptionPane
            "Are you sure you want to delete this category?",
            "Delete category",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,//do not use a custom Icon
            options,//the titles of buttons
            options[1]);//default button title

        if(choosen == 0) {

            JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "The category will be deleted. Continue?",
                "Delete category",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title

            if(choosen == 0) {

                // Connects with the database
                Con.ConnectDatabase();

                // Create a query to the database to delete the information
                String SQL = "DELETE FROM `category` WHERE name = ?";

                // Sends the query
                try(Connection conn = Con.connection;
                    PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                    preparedStmt.setString(1, txtCatName.getText());

                    preparedStmt.execute();
                }
                catch(SQLException ex) {

                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            }
        }
        JOptionPane.showMessageDialog(null, "The category has been deleted");
        emptyFields();
    }//GEN-LAST:event_btnCatDeleteActionPerformed

    /**
     * Display a list of categories registered
     * @param evt 
     */
    private void btnCatListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatListActionPerformed

        try {

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();

            // Connects with the database
            Con.ConnectDatabase();

            // Create a query to the database to count the number of rows in the table
            String SQL = "SELECT COUNT(name) FROM category";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            Con.result.next();
            // Store the number of rows obtained with the query
            int rows = Con.result.getInt(1);

            // Create a query to the database to retrieve the information
            SQL = "SELECT * FROM category";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // Stablish the headers of the columns
            String columns[] = {"Name", "Abstract"};

            // Number of rows (obtained with the query) and number of columns of the table
            String data[][] = new String[rows][2];

            int i = 0; // Store the number of the row
            while(Con.result.next()) {

                // Get the date from the database
                String name = Con.result.getString("name");
                String abstraction = Con.result.getString("abstract");
                // Populate the columns
                data[i][0] = name;
                data[i][1] = abstraction;

                // It will allow to jump to the next row
                i++;
            }

            // Create the table where it will be placed the details retrieved
            // Model of a table with rows and columns
            DefaultTableModel model = new DefaultTableModel(data, columns);
            JTable table = new JTable(model);
            table.setShowGrid(true); // Shows the lines of the table
            resizeColumnWidth(table);
            table.getAutoscrolls();// Display scroll bar when needed

            JScrollPane pane = new JScrollPane(table);// Panel with scroll bar
            JFrame f = new JFrame("CATEGORIES");// Frame where will be placed the table
            f.add(pane);
            f.pack();
            f.setLocationRelativeTo(null);
            f.setSize(680, 250);
            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            f.setVisible(true);
            f.setIconImage(new ImageIcon(getClass().getResource("/images/favicon.png")).getImage());

            table.addMouseListener(new MouseAdapter() {
                /**
                * By double clicking one of the items from the table, it will
                * display those details into the table,and close the window
                * @param mouseEvent
                */
                @Override
                public void mousePressed(MouseEvent mouseEvent) {
                    JTable table =(JTable) mouseEvent.getSource();
                    Point point = mouseEvent.getPoint();
                    int row = table.rowAtPoint(point);
                    if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {

                        // Create a query to the database to retrieve information using the ID
                        String SQL = "SELECT * FROM category WHERE name = '" +data[row][0] +"'";
                        // Calls the method to display the info
                        displayDetails(SQL);

                        // Dispose the frame with the table
                        f.dispose();
                    }
                }
            });
        }
        catch(SQLException e) {

            e.printStackTrace();
        }
    }//GEN-LAST:event_btnCatListActionPerformed

    /**
     * Action Event that clean the fields and call a method to disenable the fields
     * @param evt 
     */
    private void btnCatCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatCancelActionPerformed
        // TODO add your handling code here:
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null, //parent container of JOptionPane
            "Do you want to cancel?\n(All the details entered will be cleaned)",
            "Cancel",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,//do not use a custom Icon
            options,//the titles of buttons
            options[1]);//default button title

        if(choosen == 0) {

            emptyFields();

            disenable();

            btnCatEdit.setEnabled(false);
            btnCatDelete.setEnabled(false);
            btnCatAdd.setEnabled(true);
            btnCatList.setEnabled(true);
            btnCatSave.setText("Save");
        }
    }//GEN-LAST:event_btnCatCancelActionPerformed

    private void btnCatSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatSaveActionPerformed
        // TODO add your handling code here:
        if(checkEmptyFields()) {

            JOptionPane.showMessageDialog(null, "All fields must be filled",
                "Empty Field", JOptionPane.WARNING_MESSAGE);
        }
        else {

            try {
                saveCat();
            } catch (SQLException ex) {
                Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnCatSaveActionPerformed

    /**
     * Action Event that enables the fields to add a new category
     * @param evt 
     */
    private void btnCatAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatAddActionPerformed
        // TODO add your handling code here:
        // Empty all the fields
        emptyFields();

        enable();

        btnCatAdd.setEnabled(false);
        btnCatList.setEnabled(false);
        btnCatEdit.setEnabled(false);
        btnCatDelete.setEnabled(false);
        btnCatSave.setText("Save");
    }//GEN-LAST:event_btnCatAddActionPerformed

    /**
     * Search through the database for a category using its name
     * @param evt 
     */
    private void btnCatSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatSearchActionPerformed
        // TODO add your handling code here:

        // Pop-up message in the event the field is empty
        if(txtCatSearch.getText().isBlank()) {

            JOptionPane.showMessageDialog(null, "The field is empty",
                "Empty Field", JOptionPane.WARNING_MESSAGE);
        }
        else {

            // Create a query to the database to retrieve information using the name
            String SQL = "SELECT * FROM category WHERE name = '" +txtCatSearch.getText() +"'";
            displayDetails(SQL);
        }

    }//GEN-LAST:event_btnCatSearchActionPerformed

    private void txtCatSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCatSearchKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    
            btnCatSearch.doClick();
            // Transfer the focus to avoid poping the window up again
            btnCatSearch.transferFocus();
        }
    }//GEN-LAST:event_txtCatSearchKeyReleased

  
    /**
     * Method to save the details of the user
     * @throws java.sql.SQLException
     */
    public void saveCat() throws SQLException {
        
        // Instance of the ConnectMySQL class
        ConnectMySQL Con = new ConnectMySQL();
        // Get the text from the fielda of the UI
        String nm = txtCatName.getText();
        String dc = txtCatDescrip.getText();
        String ab = txtCatDescrip.getText().substring(0, 49);
       
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "Save details?",
                "Change Details",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title

        if(choosen == 0) {
            // Connects with the database
            Con.ConnectDatabase();
            String SQL;
            
            // Decide if it is a new category or update the details of a existing one
            if(btnCatSave.getText().equals("Save")) {
                
                if(checkName(txtCatName.getText())) {
            
                    JOptionPane.showMessageDialog(null, "The category already exists. Please,"
                            + "provide a new category.", 
                            "Category exists", JOptionPane.WARNING_MESSAGE);
                }
                else {
                    
                    // Create a query to the database to add the information               
                    SQL = "INSERT INTO `category`(`name`, `description`, `abstract`) VALUES "
                        + "(?,?,?)";

                    // Sends the query
                    try(Connection conn = Con.connection;

                        PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                        preparedStmt.setString(1, nm);
                        preparedStmt.setString(2, dc);
                        preparedStmt.setString(3, ab);

                        preparedStmt.execute();
                    }
                    catch(SQLException ex) {

                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
            }
            else {
                
                // Connects with the database
                Con.ConnectDatabase();

                // Send a query to the database to retrieve information
                SQL = "SELECT * FROM category WHERE name = '" +nm +"'";

                // Executes the given SQL statement, which returns a single ResultSet object
                Con.result = Con.statement.executeQuery(SQL);

                // If the query finds a row with the given information from the textfields
                if(Con.result.next()) {
                    
                    // Create a query to update the information of the category
                    SQL = "UPDATE `category` SET `name` = ?, `abstract` = ?, `description` = ?";

                    // Sends the query
                    try(Connection conn = Con.connection;

                        PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                        preparedStmt.setString(1, nm);
                        preparedStmt.setString(2, ab);
                        preparedStmt.setString(3, dc);

                        preparedStmt.execute();
                    }
                    catch(SQLException ex) {

                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Details updated successfully!");
                btnCatSave.setText("Save");
            }
            
            emptyFields();
            disenable();
        }
    }
    
     /**
     * Connects with the database to display the details of the category
     * @param SQL passed from btnUserSearchActionPerformed method
     */
    public void displayDetails(String SQL) {
        
        try{

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();
            
            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // If the query finds a row with the given information from the textfields
            if(Con.result.next()) {
                
                txtCatName.setText(Con.result.getString("name"));
                txtCatDescrip.setText(Con.result.getString("description"));
                btnCatEdit.setEnabled(true);
                btnCatDelete.setEnabled(true);
            }
            else {

                JOptionPane.showMessageDialog(null, "Invalid identificator");
            }
            
            Con.DisconnectDatabase();
        }
        catch(SQLException ex) {
            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
       
    }

    // Getter
    public JPanel getCatPanel() {
        return catPanel;
    }

    /**
     * Enable the fields
     */
    @Override
    public void enable() {
        
        // Enable cancel and save buttons
        btnCatCancel.setEnabled(true);
        btnCatSave.setEnabled(true);
        
        // Enable all the fields
        txtCatName.setEnabled(true);
        txtCatDescrip.setEnabled(true);
    }
    
    /**
     * Disenable the fields
     */
    public void disenable() {
        
        // Disenable cancel and save buttons
        btnCatCancel.setEnabled(false);
        btnCatSave.setEnabled(false);
        
        // Disenable all the fields
        txtCatName.setEnabled(false);
        txtCatDescrip.setEnabled(false);
        
        // Enable Add and List buttons
        btnCatAdd.setEnabled(true);
        btnCatList.setEnabled(true);
    }
    
    /**
     * Reset the fields
     */
    public void emptyFields() {
        
        txtCatName.setText("");
        txtCatSearch.setText("");
        txtCatDescrip.setText("");
    }
    
    /**
     * Check if there is any empty field in the form
     * @return true or false
     */
    public boolean checkEmptyFields() {
        
        boolean result = false;
        
        if(txtCatName.getText().isBlank() || txtCatDescrip.getText().isBlank()) 
        {
            
            result = true;
        }
        
        return result;
    }
    
    /**
     * Check in the database if there is another category with the same name
     * @param catName
     * @return 
     */
    public boolean checkName(String catName) {
        
        boolean result = false;
        
        try{

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();

            // Send a query to the database to retrieve information
            String SQL = "SELECT * FROM category WHERE name = '" +catName +"'";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // If the query finds a row with the given information from the textfields
            if(Con.result.next()) {
                
                result = true;
            }

        }
        catch(SQLException ex) {
            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
              
        return result;
    }
    
    /**
     * Adjust the width of the columns of the table to the text in the cells
     * @param table 
     */
    public void resizeColumnWidth(JTable table) {
    
        for (int column = 0; column < table.getColumnCount(); column++)
{
    TableColumn tableColumn = table.getColumnModel().getColumn(column);
    int preferredWidth = tableColumn.getMinWidth();
    int maxWidth = tableColumn.getMaxWidth();

    for (int row = 0; row < table.getRowCount(); row++)
    {
        TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
        Component c = table.prepareRenderer(cellRenderer, row, column);
        int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
        preferredWidth = Math.max(preferredWidth, width);

        //  We've exceeded the maximum width, no need to check other rows

        if (preferredWidth >= maxWidth)
        {
            preferredWidth = maxWidth;
            break;
        }
    }

    tableColumn.setPreferredWidth( preferredWidth );
}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCatAdd;
    private javax.swing.JButton btnCatCancel;
    private javax.swing.JButton btnCatDelete;
    private javax.swing.JButton btnCatEdit;
    private javax.swing.JButton btnCatList;
    private javax.swing.JButton btnCatSave;
    private javax.swing.JButton btnCatSearch;
    private javax.swing.JPanel catPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCatDescrip;
    private javax.swing.JLabel lbCatPnl;
    private javax.swing.JLabel lblCatName;
    private javax.swing.JLabel lblCatSearch;
    private javax.swing.JTextArea txtCatDescrip;
    private javax.swing.JTextField txtCatName;
    private javax.swing.JTextField txtCatSearch;
    // End of variables declaration//GEN-END:variables

    
}
