/*
 * Movie class. Admin would be able to add a new movie, edit or delete movies
 */
package back_end;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 * @author Francisco Jose Bejarano Escano
 * EC1825088
 * @date 30/04/2022
 * @location Edinburgh
 * @version 1.1
 */
public class Movie extends javax.swing.JPanel {

    
    /**
     * Creates new form User
     */
    public Movie() {
        initComponents();
        
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moviePanel = new javax.swing.JPanel();
        movieSearchPanel = new javax.swing.JPanel();
        lblMoviePnl = new javax.swing.JLabel();
        lblMovieSearch = new javax.swing.JLabel();
        cmbMovieSearch = new javax.swing.JComboBox<>();
        txtMovieSearch = new javax.swing.JTextField();
        btnMovieSearch = new javax.swing.JButton();
        movieFormPanel = new javax.swing.JPanel();
        lblMovieId = new javax.swing.JLabel();
        txtMovieId = new javax.swing.JTextField();
        lblMovieTitle = new javax.swing.JLabel();
        txtMovieTitle = new javax.swing.JTextField();
        lblMovieCategory = new javax.swing.JLabel();
        cmbMovieCat = new javax.swing.JComboBox<>();
        lblMovieRel = new javax.swing.JLabel();
        datePickerMovie = new com.github.lgooddatepicker.components.DatePicker();
        lblMovieSin = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMovieSin = new javax.swing.JTextArea();
        txtMovieDur = new javax.swing.JFormattedTextField();
        lblMovieDur = new javax.swing.JLabel();
        lblMovieLang = new javax.swing.JLabel();
        txtMovieLang = new javax.swing.JTextField();
        lblMovieAdded = new javax.swing.JLabel();
        txtMovieAdded = new javax.swing.JTextField();
        lblMovieUrl = new javax.swing.JLabel();
        txtMovieUrl = new javax.swing.JTextField();
        btnMoviePlay = new javax.swing.JButton();
        btnMovieAdd = new javax.swing.JButton();
        btnMovieSave = new javax.swing.JButton();
        btnMovieCancel = new javax.swing.JButton();
        btnMovieList = new javax.swing.JButton();
        btnMovieDelete = new javax.swing.JButton();
        btnMovieEdit = new javax.swing.JButton();
        medMovieCover = new javax.swing.JLabel();
        btnMovieExa = new javax.swing.JButton();
        lblMoviePath = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        lblMoviePnl.setText("<HTML><u>Movies</u><HTML>");
        lblMoviePnl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        lblMovieSearch.setText("Search by");

        cmbMovieSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Title" }));

        txtMovieSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMovieSearchKeyReleased(evt);
            }
        });

        btnMovieSearch.setText("Search");
        btnMovieSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovieSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout movieSearchPanelLayout = new javax.swing.GroupLayout(movieSearchPanel);
        movieSearchPanel.setLayout(movieSearchPanelLayout);
        movieSearchPanelLayout.setHorizontalGroup(
            movieSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movieSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(movieSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMoviePnl)
                    .addGroup(movieSearchPanelLayout.createSequentialGroup()
                        .addComponent(lblMovieSearch)
                        .addGap(18, 18, 18)
                        .addComponent(cmbMovieSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMovieSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMovieSearch)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        movieSearchPanelLayout.setVerticalGroup(
            movieSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movieSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMoviePnl)
                .addGap(18, 18, 18)
                .addGroup(movieSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMovieSearch)
                    .addComponent(cmbMovieSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMovieSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMovieSearch))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        lblMovieId.setText("ID: ");

        txtMovieId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMovieId.setEnabled(false);

        lblMovieTitle.setText("Title:");

        txtMovieTitle.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtMovieTitle.setEnabled(false);

        lblMovieCategory.setText("Category:");

        cmbMovieCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Category", "Action" }));
        cmbMovieCat.setSelectedItem(0);
        cmbMovieCat.setEnabled(false);

        lblMovieRel.setText("Released:");

        datePickerMovie.setEnabled(false);

        lblMovieSin.setText("Sinopsis:");

        txtMovieSin.setColumns(20);
        txtMovieSin.setRows(5);
        txtMovieSin.setEnabled(false);
        jScrollPane1.setViewportView(txtMovieSin);
        txtMovieSin.setLineWrap(true);

        txtMovieDur.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtMovieDur.setEnabled(false);

        lblMovieDur.setText("Duration");

        lblMovieLang.setText("Language:");

        txtMovieLang.setEnabled(false);

        lblMovieAdded.setText("Added:");

        txtMovieAdded.setEnabled(false);

        lblMovieUrl.setText("Movie URL:");

        txtMovieUrl.setEnabled(false);

        btnMoviePlay.setText("Play");
        btnMoviePlay.setEnabled(false);
        btnMoviePlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoviePlayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout movieFormPanelLayout = new javax.swing.GroupLayout(movieFormPanel);
        movieFormPanel.setLayout(movieFormPanelLayout);
        movieFormPanelLayout.setHorizontalGroup(
            movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movieFormPanelLayout.createSequentialGroup()
                .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(movieFormPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMovieCategory)
                            .addComponent(lblMovieSin)
                            .addComponent(lblMovieDur)
                            .addComponent(lblMovieAdded))
                        .addGap(18, 18, 18)
                        .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(movieFormPanelLayout.createSequentialGroup()
                                .addComponent(cmbMovieCat, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMovieRel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datePickerMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addGroup(movieFormPanelLayout.createSequentialGroup()
                                .addComponent(txtMovieDur, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMovieLang)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMovieLang))
                            .addGroup(movieFormPanelLayout.createSequentialGroup()
                                .addComponent(txtMovieAdded, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(movieFormPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblMovieId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMovieId, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMovieTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMovieTitle))
                    .addGroup(movieFormPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMovieUrl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMovieUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(btnMoviePlay)))
                .addContainerGap())
        );
        movieFormPanelLayout.setVerticalGroup(
            movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movieFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMovieId)
                    .addComponent(txtMovieId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMovieTitle)
                    .addComponent(txtMovieTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMovieCategory)
                    .addComponent(cmbMovieCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMovieRel)
                    .addComponent(datePickerMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMovieSin)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMovieDur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMovieDur)
                    .addComponent(lblMovieLang)
                    .addComponent(txtMovieLang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMovieAdded)
                    .addComponent(txtMovieAdded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(movieFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMovieUrl)
                    .addComponent(txtMovieUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMoviePlay))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cmbMovieCat.removeAllItems();

        cmbMovieCat.addItem("Select a Category");
        //ArrayList<Discount> names = new ArrayList<Discount>();

        String SQL = "SELECT name FROM category ";
        try {
            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();

            // Connects with the database
            Con.ConnectDatabase();

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            while(Con.result.next()){
                cmbMovieCat.addItem(Con.result.getString("name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
        }
        final LocalDate today = LocalDate.now();
        datePickerMovie.getSettings().setDateRangeLimits(today.minusYears(100), today.plusYears(100));

        btnMovieAdd.setText("Add Movie");
        btnMovieAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovieAddActionPerformed(evt);
            }
        });

        btnMovieSave.setText("Save");
        btnMovieSave.setEnabled(false);
        btnMovieSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovieSaveActionPerformed(evt);
            }
        });

        btnMovieCancel.setText("Cancel");
        btnMovieCancel.setEnabled(false);
        btnMovieCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovieCancelActionPerformed(evt);
            }
        });

        btnMovieList.setText("List");
        btnMovieList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovieListActionPerformed(evt);
            }
        });

        btnMovieDelete.setText("Delete");
        btnMovieDelete.setEnabled(false);
        btnMovieDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovieDeleteActionPerformed(evt);
            }
        });

        btnMovieEdit.setText("Edit");
        btnMovieEdit.setEnabled(false);
        btnMovieEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovieEditActionPerformed(evt);
            }
        });

        medMovieCover.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        medMovieCover.setText("-");
        medMovieCover.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        medMovieCover.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        medMovieCover.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        medMovieCover.setForeground(new java.awt.Color(60, 63, 65));
        medMovieCover.setMaximumSize(new java.awt.Dimension(15, 45));
        medMovieCover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medMovieCoverMouseClicked(evt);
            }
        });

        btnMovieExa.setText("Examine");
        btnMovieExa.setEnabled(false);
        btnMovieExa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovieExaActionPerformed(evt);
            }
        });

        lblMoviePath.setText("jLabel1");
        lblMoviePath.setEnabled(false);
        lblMoviePath.setFocusable(false);
        lblMoviePath.setForeground(new java.awt.Color(60, 63, 65));
        lblMoviePath.setOpaque(true);

        javax.swing.GroupLayout moviePanelLayout = new javax.swing.GroupLayout(moviePanel);
        moviePanel.setLayout(moviePanelLayout);
        moviePanelLayout.setHorizontalGroup(
            moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviePanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movieSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(moviePanelLayout.createSequentialGroup()
                        .addComponent(movieFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(medMovieCover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnMovieExa, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                            .addComponent(lblMoviePath)))
                    .addGroup(moviePanelLayout.createSequentialGroup()
                        .addComponent(btnMovieAdd)
                        .addGap(6, 6, 6)
                        .addComponent(btnMovieSave)
                        .addGap(6, 6, 6)
                        .addComponent(btnMovieCancel)
                        .addGap(6, 6, 6)
                        .addComponent(btnMovieList)
                        .addGap(89, 89, 89)
                        .addComponent(btnMovieDelete)
                        .addGap(6, 6, 6)
                        .addComponent(btnMovieEdit)))
                .addGap(0, 9, Short.MAX_VALUE))
        );
        moviePanelLayout.setVerticalGroup(
            moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviePanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(movieSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movieFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(moviePanelLayout.createSequentialGroup()
                        .addComponent(medMovieCover, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMovieExa)
                        .addGap(18, 18, 18)
                        .addComponent(lblMoviePath)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMovieAdd)
                    .addComponent(btnMovieSave)
                    .addComponent(btnMovieCancel)
                    .addComponent(btnMovieList)
                    .addComponent(btnMovieDelete)
                    .addComponent(btnMovieEdit)))
        );

        Dimension size = medMovieCover.getPreferredSize();
        medMovieCover.setBounds(50, 30, size.width, size.height);
        lblMoviePath.setVisible(false);

        add(moviePanel, "card2");

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

//GEN-FIRST:event_btnAdminSaveActionPerformed
 
//GEN-LAST:event_btnAdminSaveActionPerformed

    /**
     * Action Event that enables all the editable fields of the movie panel
     * Update the details of the movie selected in the database
     * @param evt 
     */
    private void btnMovieEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovieEditActionPerformed
        // TODO add your handling code here:
        enable();
        btnMovieSave.setText("Update");
        btnMovieAdd.setEnabled(false);
    }//GEN-LAST:event_btnMovieEditActionPerformed

    /**
     * Delete from the database the details displayed in the screen
     * @param evt 
     */
    private void btnMovieDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovieDeleteActionPerformed
        // TODO add your handling code here:
        // Instance of the ConnectMySQL class
        ConnectMySQL Con = new ConnectMySQL();

        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null,//parent container of JOptionPane
            "Are you sure you want to delete this movie?",
            "Delete user",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,//do not use a custom Icon
            options,//the titles of buttons
            options[1]);//default button title

        if(choosen == 0) {

            JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "The movie will be deleted. Continue?",
                "Delete movie",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title

            if(choosen == 0) {

                // Connects with the database
                Con.ConnectDatabase();

                // Create a query to the database to delete the information
                String SQL = "DELETE FROM `movie` WHERE movieId = ?";

                // Sends the query
                try(Connection conn = Con.connection;
                    PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                    preparedStmt.setString(1, txtMovieId.getText());

                    preparedStmt.execute();
                }
                catch(SQLException ex) {

                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            }
        }
        JOptionPane.showMessageDialog(null, "The movie has been deleted");
        emptyFields();
    }//GEN-LAST:event_btnMovieDeleteActionPerformed

    /**
     * Display a list of movies registered
     * @param evt 
     */
    private void btnMovieListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovieListActionPerformed

        try {

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();

            // Connects with the database
            Con.ConnectDatabase();

            // Create a query to the database to count the number of rows in the table
            String SQL = "SELECT COUNT(movieId) FROM movie";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            Con.result.next();
            // Store the number of rows obtained with the query
            int rows = Con.result.getInt(1);

            // Create a query to the database to retrieve the information
            SQL = "SELECT * FROM movie";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // Stablish the headers of the columns
            String columns[] = {"ID", "Title", "Category", "Released", "Language",
                "Duration", "Added"};

            // Number of rows (obtained with the query) and number of columns of the table
            String data[][] = new String[rows][7];

            int i = 0; // Store the number of the row
            while(Con.result.next()) {

                // Get the date from the database
                String id = Con.result.getString("movieId");
                String title = Con.result.getString("title");
                String category = Con.result.getString("category");
                String released = Con.result.getString("released");
                String language = Con.result.getString("language");
                String duration = Con.result.getString("mov_duration");
                String added = Con.result.getString("added");

                // Populate the columns
                data[i][0] = id;
                data[i][1] = title;
                data[i][2] = category;
                data[i][3] = released;
                data[i][4] = language;
                data[i][5] = duration;
                data[i][6] = added;

                // It will allow to jump to the next row
                i++;
            }

            // Create the table where it will be placed the details retrieved
            // Model of a table with rows and columns
            DefaultTableModel model = new DefaultTableModel(data, columns);
            model.isCellEditable(rows, 9);
            JTable table = new JTable(model);
            table.setShowGrid(true); // Shows the lines of the table
            resizeColumnWidth(table);
            table.getAutoscrolls();// Display scroll bar when needed

            JScrollPane pane = new JScrollPane(table);// Panel with scroll bar
            JFrame f = new JFrame("MOVIES");// Frame where will be placed the table
            f.add(pane);
            f.pack();
            f.setLocationRelativeTo(null);
            f.setSize(680, 250);
            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            f.setVisible(true);
            f.setIconImage(new ImageIcon(getClass().getResource("/images/favicon.png")).getImage());

            table.addMouseListener(new MouseAdapter() {
                /**
                * By double clicking one of the items from the table, it will
                * display those details into the table,and close the window
                * @param mouseEvent
                */
                @Override
                public void mousePressed(MouseEvent mouseEvent) {
                    JTable table =(JTable) mouseEvent.getSource();
                    Point point = mouseEvent.getPoint();
                    int row = table.rowAtPoint(point);
                    if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {

                        // Create a query to the database to retrieve information using the ID
                        String SQL = "SELECT * FROM movie WHERE movieId = '" +data[row][0] +"'";
                        // Calls the method to display the info
                        displayDetails(SQL);

                        // Dispose the frame with the table
                        f.dispose();
                    }

                }
            });
        }
        catch(SQLException e) {

            e.printStackTrace();
        }
    }//GEN-LAST:event_btnMovieListActionPerformed

    /**
     * Action Event that clean the fields and call a method to disenable the fields
     * @param evt 
     */
    private void btnMovieCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovieCancelActionPerformed
        // TODO add your handling code here:
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null, //parent container of JOptionPane
            "Do you want to cancel?\n(All the details entered will be cleaned)",
            "Cancel",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,//do not use a custom Icon
            options,//the titles of buttons
            options[1]);//default button title

        if(choosen == 0) {

            emptyFields();

            disenable();

            btnMovieEdit.setEnabled(false);
            btnMovieDelete.setEnabled(false);
            btnMovieAdd.setEnabled(true);
            btnMovieList.setEnabled(true);
            btnMovieSave.setText("Save");
        }
    }//GEN-LAST:event_btnMovieCancelActionPerformed

    /**
     * Action Event that calls the method saveUser only if all the fields
     * are filled
     * @param evt 
     */
    private void btnMovieSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovieSaveActionPerformed
        // TODO add your handling code here:
        if(checkEmptyFields()) {
            
            JOptionPane.showMessageDialog(null, "All fields must be filled", 
                    "Empty Field", JOptionPane.WARNING_MESSAGE);
        }
        else {
            
            try {  
                saveMovie();
            } catch (SQLException ex) {
                Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnMovieSaveActionPerformed

    /**
     * Action Event that enables the fields to add a new movie
     * @param evt 
     */
    private void btnMovieAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovieAddActionPerformed
        // TODO add your handling code here:
        // Empty all the fields
        emptyFields();

        enable();

        btnMovieAdd.setEnabled(false);
        btnMovieList.setEnabled(false);
        btnMovieEdit.setEnabled(false);
        btnMovieDelete.setEnabled(false);
        btnMovieSave.setText("Save");
    }//GEN-LAST:event_btnMovieAddActionPerformed

    /**
     * Search through the database for a movie by its ID or title and enable
     * edit and delete buttons
     * @param evt 
     */
    private void btnMovieSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovieSearchActionPerformed
        // TODO add your handling code here:

        // Pop-up message in the event the field is empty
        if(txtMovieSearch.getText().isBlank()) {

            JOptionPane.showMessageDialog(null, "The field is empty",
                "Empty Field", JOptionPane.WARNING_MESSAGE);
        }
        else if(cmbMovieSearch.getSelectedItem().equals("ID")) {

            // Create a query to the database to retrieve information using the ID
            String SQL = "SELECT * FROM movie WHERE movieId = '" +txtMovieSearch.getText() +"'";
            displayDetails(SQL);

        }
        else {

            // Create a query to the database to retrieve information using the title
            String SQL = "SELECT * FROM movie WHERE title = '" +txtMovieSearch.getText() +"'";
            displayDetails(SQL);
            
        }

    }//GEN-LAST:event_btnMovieSearchActionPerformed

    /**
     * Pressing the key Enter is like pressing the Search button
     * @param evt 
     */
    private void txtMovieSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMovieSearchKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {

            btnMovieSearch.doClick();
            // Transfer the focus to avoid poping the window up again
            btnMovieSearch.transferFocus();
        }
    }//GEN-LAST:event_txtMovieSearchKeyReleased

    /**
     * Open a file browser to select the cover image of the movie
     * @param evt 
     */
    private void btnMovieExaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovieExaActionPerformed
        // TODO add your handling code here:
        // String where the path of the file selected will be stored
        String path;
        // Allows to open a dialog window in which the user can select a file
        JFileChooser fc = new JFileChooser("C:/Users/Fran/OneDrive - Edinburgh "
                + "College/HND Computing Software Development/Year 2/Graded Unit"
                + "/Webflix/Back-End/Webflix1.1/src/images/movies");
        // Filter the type of archives shown in the file explorer
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG, PNG & GIF Images", "jpg", "gif", "png");
        fc.setFileFilter(filter);
        /* In the showOpenDialog parameter the window is indicated to which it 
        will be associated. With the value this it is associated to the window 
        that opens it */
        int accept = fc.showOpenDialog(this);
        // Check if OK has been pressed
        if(accept == JFileChooser.APPROVE_OPTION) {
            
            // Create a File object with the chosen file
            File selectedFile = fc.getSelectedFile();
            BufferedImage img = null;            
            // Path of the file
            path = "images/movies/" +selectedFile.getName();
            try {
                img = ImageIO.read(selectedFile);
            } catch (IOException ex) {
                Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
            }
            Image dimg = img.getScaledInstance(medMovieCover.getWidth(), 
                    medMovieCover.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(dimg);
            // Embed the file selected into the label in the frame
            medMovieCover.setIcon(imageIcon);
            lblMoviePath.setText(path);
        }
    }//GEN-LAST:event_btnMovieExaActionPerformed

    /**
     * Passes the URL entered in the JTextfield and passes to be parsed in URI
     * @param evt 
     */
    private void btnMoviePlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoviePlayActionPerformed
        // TODO add your handling code here:
       URL url = null;
        try {
            url = new URL(txtMovieUrl.getText());
        } catch (MalformedURLException ex) {
            Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
        }
       
       openWebpage(url);
    }//GEN-LAST:event_btnMoviePlayActionPerformed

    private void medMovieCoverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medMovieCoverMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_medMovieCoverMouseClicked

    /**
     * Method to save the details of the movie
     * @throws java.sql.SQLException
     */
    public void saveMovie() throws SQLException {
        
        // Instance of the ConnectMySQL class
        ConnectMySQL Con = new ConnectMySQL();
        // Get the text from the fielda of the UI
        String id = txtMovieId.getText();
        String tt = txtMovieTitle.getText();
        String ct = cmbMovieCat.getSelectedItem().toString();
        String cv = lblMoviePath.getText();
        String sn = txtMovieSin.getText();
        String rl = datePickerMovie.getDate().format(DateTimeFormatter.ofPattern("uuuu-MM-dd"));
        String ln = txtMovieLang.getText();
        String dr = txtMovieDur.getText();
        String ur = txtMovieUrl.getText();
            String part1 = ur.substring(0, 24);
            String part2 = ur.substring(32);
            ur = part1 +"embed/" +part2;
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "Save details?",
                "Change Details",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title
        // Check if both passwords are equals
        if(choosen == 0) {
            // Connects with the database
            Con.ConnectDatabase();
            String SQL;
            
            // Decide if it is a new user or update the details of a existing one
            if(btnMovieSave.getText().equals("Save")) {
                
                if(checkTitle(txtMovieTitle.getText())) {
            
                    JOptionPane.showMessageDialog(null, "This movie already exists.", 
                            "Movie exists", JOptionPane.WARNING_MESSAGE);
                }
                else {
                    
                    // Create a query to the database to add the information               
                    SQL = "INSERT INTO `movie`(`title`, `category`, `cover`, "
                        + "`sinopsis`, `released`, `language`, `mov_duration`, "
                            + "`mov_link`) VALUES (?,?,?,?,?,?,?,?)";

                    // Sends the query
                    try(Connection conn = Con.connection;

                        PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                        preparedStmt.setString(1, tt);
                        preparedStmt.setString(2, ct);
                        preparedStmt.setString(3, cv);
                        preparedStmt.setString(4, sn);
                        preparedStmt.setString(5, rl);
                        preparedStmt.setString(6, ln);
                        preparedStmt.setString(7, dr);
                        preparedStmt.setString(8, ur);

                        preparedStmt.execute();
                    }
                    catch(SQLException ex) {

                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
                JOptionPane.showMessageDialog(null, "Details saved successfully!");
            }
            else {
                
                // Connects with the database
                Con.ConnectDatabase();

                // Send a query to the database to retrieve information
                SQL = "SELECT * FROM movie WHERE movieId = '" +id +"'";

                // Executes the given SQL statement, which returns a single ResultSet object
                Con.result = Con.statement.executeQuery(SQL);

                // If the query finds a row with the given information from the textfields
                if(Con.result.next()) {
                    
                    // Create a query to update the information of ther user
                    SQL = "UPDATE `movie` SET `title` = ?, `category` = ?, "
                            + "`cover` = ?, `sinopsis` = ?, `released` = ?, "
                            + "`language` = ?, `mov_duration` = ?, `mov_link` = ? "
                            + "WHERE `movieId` = ?";

                    // Sends the query
                    try(Connection conn = Con.connection;

                        PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                        preparedStmt.setString(1, tt);
                        preparedStmt.setString(2, ct);
                        preparedStmt.setString(3, cv);
                        preparedStmt.setString(4, sn);
                        preparedStmt.setString(5, rl);
                        preparedStmt.setString(6, ln);
                        preparedStmt.setString(7, dr);
                        preparedStmt.setString(8, ur);
                        preparedStmt.setString(9, id);

                        preparedStmt.execute();
                    }
                    catch(SQLException ex) {

                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Details updated successfully!");
                btnMovieSave.setText("Save");
            }
            
            emptyFields();
            disenable();
        }
    }
    
     /**
     * Connects with the database to display the details of the movie
     * retrieved from the database
     * @param SQL passed from btnUserSearchActionPerformed method
     */
    public void displayDetails(String SQL) {
        
        try{

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();
            
            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // If the query finds a row with the given information from the textfields
            if(Con.result.next()) {
                
                txtMovieId.setText(Con.result.getString("movieId"));
                txtMovieTitle.setText(Con.result.getString("title"));
                cmbMovieCat.setSelectedItem(Con.result.getString("category"));
                lblMoviePath.setText(Con.result.getString("cover"));
                txtMovieSin.setText(Con.result.getString("sinopsis"));
                datePickerMovie.setText(Con.result.getString("released"));
                txtMovieLang.setText(Con.result.getString("language"));
                txtMovieDur.setText(Con.result.getString("mov_duration")); 
                txtMovieUrl.setText(Con.result.getString("mov_link"));               
                txtMovieAdded.setText(Con.result.getString("added"));
                
                //Resize the picture
                ImageIcon imageIcon = new ImageIcon(getClass().getResource("/" +lblMoviePath.getText()));
                Image dimg = imageIcon.getImage().getScaledInstance(medMovieCover.getWidth(), 
                    medMovieCover.getHeight(), Image.SCALE_SMOOTH);
                Icon scaledIcon = new ImageIcon(dimg);

                // Embed the file selected into the label in the frame
                medMovieCover.setIcon(scaledIcon);

                btnMovieEdit.setEnabled(true);
                btnMovieDelete.setEnabled(true);
                btnMoviePlay.setEnabled(true);
            }
            else {

                JOptionPane.showMessageDialog(null, "Invalid identificator");
            }
            
            Con.DisconnectDatabase();
        }
        catch(SQLException ex) {
            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
       
    }

    // Getter
    public JPanel getMoviePanel() {
        return moviePanel;
    }

    /**
     * Enable the fields
     */
    @Override
    public void enable() {
        
        // Enable cancel and save buttons
        btnMovieCancel.setEnabled(true);
        btnMovieSave.setEnabled(true);
        btnMovieExa.setEnabled(true);
        
        // Enable all the fields
        txtMovieTitle.setEnabled(true);
        cmbMovieCat.setEnabled(true);
        txtMovieSin.setEnabled(true);
        datePickerMovie.setEnabled(true);
        txtMovieLang.setEnabled(true);
        txtMovieDur.setEnabled(true);
        txtMovieUrl.setEnabled(true);
    }
    
    /**
     * Disenable the fields
     */
    public void disenable() {
        
        // Disenable cancel and save buttons
        btnMovieCancel.setEnabled(false);
        btnMovieSave.setEnabled(false);
        btnMovieExa.setEnabled(false);
        
        // Disenable all the fields
        txtMovieTitle.setEnabled(false);
        cmbMovieCat.setEnabled(false);
        txtMovieSin.setEnabled(false);
        datePickerMovie.setEnabled(false);
        txtMovieLang.setEnabled(false);
        txtMovieDur.setEnabled(false);
        txtMovieUrl.setEnabled(false);
        
        // Enable Add Movie and List buttons
        btnMovieAdd.setEnabled(true);
        btnMovieList.setEnabled(true);
    }
    
    /**
     * Reset the fields
     */
    public void emptyFields() {
        
        txtMovieSearch.setText("");
        txtMovieId.setText("");
        txtMovieTitle.setText("");
        cmbMovieCat.setSelectedItem("Select a Category");
        medMovieCover.setIcon(null);
        txtMovieSin.setText("");
        datePickerMovie.setText("");
        txtMovieLang.setText("");
        txtMovieDur.setText("");
        txtMovieUrl.setText("");
        txtMovieAdded.setText("");
    }

    
    /**
     * Check if there is any empty field in the form
     * @return true or false
     */
    public boolean checkEmptyFields() {
        
        boolean result = false;

        if(txtMovieTitle.getText().isBlank() || 
                cmbMovieCat.getSelectedItem().equals("Select a Category") || 
                lblMoviePath.getText().isBlank() || 
                txtMovieSin.getText().isBlank() || 
                datePickerMovie.getText().isBlank() || 
                txtMovieLang.getText().isBlank() ||
                txtMovieDur.getText().isBlank() ||
                txtMovieUrl.getText().isBlank()) {
            
            result = true;
        }
        
        return result;
    }
    
    /**
     * Check in the database if there is another movie with the same title
     * @param movieTitle
     * @return 
     */
    public boolean checkTitle(String movieTitle) {
        
        boolean result = false;
        
        try{

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();

            // Send a query to the database to retrieve information
            String SQL = "SELECT * FROM movie WHERE title = '" +movieTitle +"'";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // If the query finds a row with the given information from the textfields
            if(Con.result.next()) {
                
                result = true;
            }

        }
        catch(SQLException ex) {
            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
              
        return result;
    }
    
    /**
     * Adjust the width of the columns of the table to the text in the cells
     * @param table 
     */
    public void resizeColumnWidth(JTable table) {
    
        for (int column = 0; column < table.getColumnCount(); column++) {
    
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                // Exceeded the maximum width, no need to check other rows
                if (preferredWidth >= maxWidth) {
                    
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
    }
    
    public static boolean openWebpage(URL url) {
        try {
            return openWebpage(url.toURI());
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return false;
    }
    
    public static boolean openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
                return true;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return false;
    }
    
     public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMovieAdd;
    private javax.swing.JButton btnMovieCancel;
    private javax.swing.JButton btnMovieDelete;
    private javax.swing.JButton btnMovieEdit;
    private javax.swing.JButton btnMovieExa;
    private javax.swing.JButton btnMovieList;
    private javax.swing.JButton btnMoviePlay;
    private javax.swing.JButton btnMovieSave;
    private javax.swing.JButton btnMovieSearch;
    private javax.swing.JComboBox<String> cmbMovieCat;
    private javax.swing.JComboBox<String> cmbMovieSearch;
    private com.github.lgooddatepicker.components.DatePicker datePickerMovie;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMovieAdded;
    private javax.swing.JLabel lblMovieCategory;
    private javax.swing.JLabel lblMovieDur;
    private javax.swing.JLabel lblMovieId;
    private javax.swing.JLabel lblMovieLang;
    private javax.swing.JLabel lblMoviePath;
    private javax.swing.JLabel lblMoviePnl;
    private javax.swing.JLabel lblMovieRel;
    private javax.swing.JLabel lblMovieSearch;
    private javax.swing.JLabel lblMovieSin;
    private javax.swing.JLabel lblMovieTitle;
    private javax.swing.JLabel lblMovieUrl;
    private javax.swing.JLabel medMovieCover;
    private javax.swing.JPanel movieFormPanel;
    private javax.swing.JPanel moviePanel;
    private javax.swing.JPanel movieSearchPanel;
    private javax.swing.JTextField txtMovieAdded;
    private javax.swing.JFormattedTextField txtMovieDur;
    private javax.swing.JTextField txtMovieId;
    private javax.swing.JTextField txtMovieLang;
    private javax.swing.JTextField txtMovieSearch;
    private javax.swing.JTextArea txtMovieSin;
    private javax.swing.JTextField txtMovieTitle;
    private javax.swing.JTextField txtMovieUrl;
    // End of variables declaration//GEN-END:variables

    
}
