/*
 * User class. Admin would be able to add a new user, edit or delete users
 */
package back_end;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 * @author Francisco Jose Bejarano Escano
 * EC1825088
 * @date 25/04/2022
 * @location Edinburgh
 * @version 1.1
 */
public class User extends javax.swing.JPanel {

    
    /**
     * Creates new form User
     */
    public User() {
        initComponents();
        
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        radGroupUserStatus = new javax.swing.ButtonGroup();
        userPanel = new javax.swing.JPanel();
        lbluserPnl = new javax.swing.JLabel();
        lblUserSearch = new javax.swing.JLabel();
        cmbUserSearch = new javax.swing.JComboBox<>();
        txtUserSearch = new javax.swing.JTextField();
        btnUserSearch = new javax.swing.JButton();
        lblUserId = new javax.swing.JLabel();
        txtUserId = new javax.swing.JTextField();
        lbUserFirstname = new javax.swing.JLabel();
        txtUserFirstname = new javax.swing.JTextField();
        lblUserSurname = new javax.swing.JLabel();
        txtUserSurname = new javax.swing.JTextField();
        lblUserEmail = new javax.swing.JLabel();
        txtUserEmail = new javax.swing.JTextField();
        lblUserPass = new javax.swing.JLabel();
        txtUserPass = new javax.swing.JPasswordField();
        lblUserDOB = new javax.swing.JLabel();
        lblUserJoin = new javax.swing.JLabel();
        txtUserJoin = new javax.swing.JTextField();
        lblUserContact = new javax.swing.JLabel();
        lblUserStatus = new javax.swing.JLabel();
        radUserInact = new javax.swing.JRadioButton();
        radUserAct = new javax.swing.JRadioButton();
        radUserBlock = new javax.swing.JRadioButton();
        btnUserAdd = new javax.swing.JButton();
        btnUserSave = new javax.swing.JButton();
        btnUserCancel = new javax.swing.JButton();
        btnUserList = new javax.swing.JButton();
        btnUserDelete = new javax.swing.JButton();
        btnUserEdit = new javax.swing.JButton();
        datePicker = new com.github.lgooddatepicker.components.DatePicker();
        txtUserContact = new javax.swing.JFormattedTextField();

        radGroupUserStatus.add(radUserInact);
        radGroupUserStatus.add(radUserAct);
        radGroupUserStatus.add(radUserBlock);

        setMaximumSize(new java.awt.Dimension(504, 385));
        setLayout(new java.awt.GridBagLayout());

        userPanel.setMaximumSize(new java.awt.Dimension(504, 385));
        userPanel.setLayout(new java.awt.GridBagLayout());

        lbluserPnl.setText("<HTML><u>Users</u><HTML>");
        lbluserPnl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        userPanel.add(lbluserPnl, gridBagConstraints);

        lblUserSearch.setText("Search by");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 6, 0, 0);
        userPanel.add(lblUserSearch, gridBagConstraints);

        cmbUserSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "email" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 29;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        userPanel.add(cmbUserSearch, gridBagConstraints);

        txtUserSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUserSearchKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 45;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 90;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 191;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 18, 0, 0);
        userPanel.add(txtUserSearch, gridBagConstraints);

        btnUserSearch.setText("Search");
        btnUserSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 227;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 5, 0, 6);
        userPanel.add(btnUserSearch, gridBagConstraints);

        lblUserId.setText("ID: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(41, 6, 0, 0);
        userPanel.add(lblUserId, gridBagConstraints);

        txtUserId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtUserId.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 60;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(38, 12, 0, 0);
        userPanel.add(txtUserId, gridBagConstraints);

        lbUserFirstname.setText("First Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        userPanel.add(lbUserFirstname, gridBagConstraints);

        txtUserFirstname.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtUserFirstname.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 60;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 0);
        userPanel.add(txtUserFirstname, gridBagConstraints);

        lblUserSurname.setText("Surname:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 129;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 47, 0, 0);
        userPanel.add(lblUserSurname, gridBagConstraints);

        txtUserSurname.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtUserSurname.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 134;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 94;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 18, 0, 6);
        userPanel.add(txtUserSurname, gridBagConstraints);

        lblUserEmail.setText("Email:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        userPanel.add(lblUserEmail, gridBagConstraints);

        txtUserEmail.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtUserEmail.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 60;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 0);
        userPanel.add(txtUserEmail, gridBagConstraints);

        lblUserPass.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 129;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 47, 0, 0);
        userPanel.add(lblUserPass, gridBagConstraints);

        txtUserPass.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtUserPass.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 134;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 94;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 18, 0, 6);
        userPanel.add(txtUserPass, gridBagConstraints);

        lblUserDOB.setText("DOB:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 6, 0, 0);
        userPanel.add(lblUserDOB, gridBagConstraints);

        lblUserJoin.setText("Join Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 129;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 47, 0, 0);
        userPanel.add(lblUserJoin, gridBagConstraints);

        txtUserJoin.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 134;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 94;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 78;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(19, 16, 0, 6);
        userPanel.add(txtUserJoin, gridBagConstraints);

        lblUserContact.setText("Contact No:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 6, 0, 0);
        userPanel.add(lblUserContact, gridBagConstraints);

        lblUserStatus.setText("Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 129;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 47, 0, 0);
        userPanel.add(lblUserStatus, gridBagConstraints);

        radUserInact.setText("Inactive");
        radUserInact.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 134;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 92;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 16, 0, 0);
        userPanel.add(radUserInact, gridBagConstraints);

        radUserAct.setText("Active");
        radUserAct.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 134;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 91;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        userPanel.add(radUserAct, gridBagConstraints);

        radUserBlock.setText("Blocked");
        radUserBlock.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 134;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 93;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 0, 0);
        userPanel.add(radUserBlock, gridBagConstraints);

        btnUserAdd.setText("Add User");
        btnUserAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 24, 0);
        userPanel.add(btnUserAdd, gridBagConstraints);

        btnUserSave.setText("Save");
        btnUserSave.setEnabled(false);
        btnUserSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 24, 0);
        userPanel.add(btnUserSave, gridBagConstraints);

        btnUserCancel.setText("Cancel");
        btnUserCancel.setEnabled(false);
        btnUserCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 68;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 61;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 24, 0);
        userPanel.add(btnUserCancel, gridBagConstraints);

        btnUserList.setText("List");
        btnUserList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 129;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 24, 0);
        userPanel.add(btnUserList, gridBagConstraints);

        btnUserDelete.setText("Delete");
        btnUserDelete.setEnabled(false);
        btnUserDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 134;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 92;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 8, 24, 0);
        userPanel.add(btnUserDelete, gridBagConstraints);

        btnUserEdit.setText("Edit");
        btnUserEdit.setEnabled(false);
        btnUserEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserEditActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 227;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 5, 24, 6);
        userPanel.add(btnUserEdit, gridBagConstraints);

        datePicker.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 60;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(19, 12, 0, 0);
        userPanel.add(datePicker, gridBagConstraints);
        final LocalDate today = LocalDate.now();
        LocalDate over18 = today.minusYears(18);
        datePicker.getSettings().setDateRangeLimits(over18.minusYears(100), over18.plusYears(0));

        txtUserContact.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtUserContact.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 60;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 76;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 0);
        userPanel.add(txtUserContact, gridBagConstraints);

        add(userPanel, new java.awt.GridBagConstraints());
        userPanel.getAccessibleContext().setAccessibleDescription("");

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

//GEN-FIRST:event_btnAdminSaveActionPerformed
 
//GEN-LAST:event_btnAdminSaveActionPerformed
    /**
     * Action Event that calls the method saveUser only if all the fields
     * are filled
     * @param evt 
     */
    private void btnUserSaveActionPerformed(java.awt.event.ActionEvent evt) {
        
        if(checkEmptyFields()) {
            
            JOptionPane.showMessageDialog(null, "All fields must be filled", 
                    "Empty Field", JOptionPane.WARNING_MESSAGE);
        }
        else {
            
            try {  
                saveUser();
            } catch (SQLException ex) {
                Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
    /**
     * Action Event that enables all the editable fields of the user panel
     * @param evt 
     */
    private void btnUserEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserEditActionPerformed
        // TODO add your handling code here:
        enable();
        btnUserSave.setText("Update");
        btnUserAdd.setEnabled(false);
    }//GEN-LAST:event_btnUserEditActionPerformed
    /**
     * Action Event that enables the fields to add a new user
     * @param evt 
     */
    private void btnUserAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserAddActionPerformed
        // TODO add your handling code here:
        // Empty all the fields
        emptyFields();
        
        enable();  
        
        btnUserAdd.setEnabled(false);
        btnUserList.setEnabled(false);
        btnUserEdit.setEnabled(false);
        btnUserDelete.setEnabled(false);
        btnUserSave.setText("Save");
    }//GEN-LAST:event_btnUserAddActionPerformed

    /**
     * Action Event that clean the fields and call a method to disenable the fields
     * @param evt 
     */
    private void btnUserCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserCancelActionPerformed
        // TODO add your handling code here:
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null, //parent container of JOptionPane
            "Do you want to cancel?\n(All the details entered will be cleaned)",
                "Cancel",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title

        if(choosen == 0) {
            
            emptyFields();
            
            disenable();
            
            btnUserEdit.setEnabled(false);
            btnUserDelete.setEnabled(false);
            btnUserAdd.setEnabled(true);
            btnUserList.setEnabled(true);
            btnUserSave.setText("Save");
        }
    }//GEN-LAST:event_btnUserCancelActionPerformed

    /**
     * Search through the database for an user by his/her ID or email and enable
     * edit and delete buttons
     * @param evt 
     */
    private void btnUserSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserSearchActionPerformed
        // TODO add your handling code here:
        
        // Pop-up message in the event the field is empty
        if(txtUserSearch.getText().isBlank()) {
            
            JOptionPane.showMessageDialog(null, "The field is empty", 
                    "Empty Field", JOptionPane.WARNING_MESSAGE);
        }
        else if(cmbUserSearch.getSelectedItem().equals("ID")) {
            
            // Create a query to the database to retrieve information using the ID
            String SQL = "SELECT * FROM user WHERE userID = '" +txtUserSearch.getText() +"'";
            displayDetails(SQL);

        }
        else {
            
            // Checks if the text entered contains an '@' symbol as part of the
            // correct format of an email
            if(!txtUserSearch.getText().contains("@")) {
                
                JOptionPane.showMessageDialog(null, "This is not a valid email", 
                    "Wrong email format", JOptionPane.WARNING_MESSAGE);
            }
            else {
                // Create a query to the database to retrieve information using the email
                String SQL = "SELECT * FROM user WHERE email = '" +txtUserSearch.getText() +"'";
                displayDetails(SQL);
            }
        }
        
        
    }//GEN-LAST:event_btnUserSearchActionPerformed

    /**
     * Pressing the key Enter is like pressing the Search button
     * @param evt 
     */
    private void txtUserSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserSearchKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    
            btnUserSearch.doClick();
            // Transfer the focus to avoid poping the window up again
            btnUserSearch.transferFocus();
        }
    }//GEN-LAST:event_txtUserSearchKeyReleased

    /**
     * Delete from the database the details displayed in the screen
     * @param evt 
     */
    private void btnUserDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserDeleteActionPerformed
        // TODO add your handling code here:
        // Instance of the ConnectMySQL class
        ConnectMySQL Con = new ConnectMySQL();
        
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "Are you sure you want to delete this user?",
                "Delete user",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title
        
        if(choosen == 0) {
            
            JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "The user will be deleted. Continue?",
                "Delete user",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title
        
            if(choosen == 0) {
                
                // Connects with the database
                Con.ConnectDatabase();
                
                // Create a query to the database to delete the information
                String SQL = "DELETE FROM `user` WHERE userID = ?";
                        
                // Sends the query
                try(Connection conn = Con.connection;
                    PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                    preparedStmt.setString(1, txtUserId.getText());

                    preparedStmt.execute();
                }
                catch(SQLException ex) {

                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            }
        }
        JOptionPane.showMessageDialog(null, "The user has been deleted");
        emptyFields();
    }//GEN-LAST:event_btnUserDeleteActionPerformed

    /**
     * Display a list of users registered
     * @param evt 
     */
    private void btnUserListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserListActionPerformed
       
        try {
            
            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();
            
            // Create a query to the database to count the number of rows in the table
            String SQL = "SELECT COUNT(userID) FROM user";
            
            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);
            
            Con.result.next();
            // Store the number of rows obtained with the query
            int rows = Con.result.getInt(1);
            
            // Create a query to the database to retrieve the information
            SQL = "SELECT * FROM user";
            
            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);
            
            // Stablish the headers of the columns
            String columns[] = {"ID", "First Name", "Surname", "Email", "Password", 
                "Date of Birth", "Join Date", "Contact No", "Status"};
            
            // Number of rows (obtained with the query) and number of columns of the table
            String data[][] = new String[rows][9];
            
            int i = 0; // Store the number of the row
            while(Con.result.next()) {
                
                // Get the date from the database
                String id = Con.result.getString("userID");
                String firstname = Con.result.getString("firstname");
                String surname = Con.result.getString("surname");
                String email = Con.result.getString("email");
                String pass = Con.result.getString("pass");
                String dob = Con.result.getString("dob");
                String joinDate = Con.result.getString("joinDate");
                String contactNo = Con.result.getString("contactNo");
                String status = Con.result.getString("status");
                
                // Populate the columns
                data[i][0] = id;
                data[i][1] = firstname;
                data[i][2] = surname;
                data[i][3] = email;
                data[i][4] = pass;
                data[i][5] = dob;
                data[i][6] = joinDate;
                data[i][7] = contactNo;
                data[i][8] = status;
                
                // It will allow to jump to the next row
                i++;
            }
            
            // Create the table where it will be placed the details retrieved
            // Model of a table with rows and columns
            DefaultTableModel model = new DefaultTableModel(data, columns); 
            JTable table = new JTable(model);
            table.setShowGrid(true); // Shows the lines of the table           
            resizeColumnWidth(table);            
            table.getAutoscrolls();// Display scroll bar when needed.
            
            JScrollPane pane = new JScrollPane(table);// Panel with scroll bar
            JFrame f = new JFrame("USERS");// Frame where will be placed the table
            f.add(pane);
            f.pack();
            f.setLocationRelativeTo(null);
            f.setSize(680, 250);
            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            f.setVisible(true);
            f.setIconImage(new ImageIcon(getClass().getResource("/images/favicon.png")).getImage());
             
            table.addMouseListener(new MouseAdapter() {
                /**
                 * By double clicking one of the items from the table, it will 
                 * display those details into the table,and close the window
                 * @param mouseEvent 
                 */
                @Override
                public void mousePressed(MouseEvent mouseEvent) {
                    JTable table =(JTable) mouseEvent.getSource();
                    Point point = mouseEvent.getPoint();
                    int row = table.rowAtPoint(point);
                    if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {
                        
                        // Create a query to the database to retrieve information using the ID
                        String SQL = "SELECT * FROM user WHERE userID = '" +data[row][0] +"'";
                        // Calls the method to display the info
                        displayDetails(SQL);
                        
                        // Dispose the frame with the table
                        f.dispose();
                    }

                }              
            });
        }
        catch(SQLException e) {
            
            e.printStackTrace();
          }
    }//GEN-LAST:event_btnUserListActionPerformed

    /**
     * Method to save the details of the user
     * @throws java.sql.SQLException
     */
    public void saveUser() throws SQLException {
        
        // Instance of the ConnectMySQL class
        ConnectMySQL Con = new ConnectMySQL();
        // Get the text from the fielda of the UI
        String id = txtUserId.getText();
        String fn = txtUserFirstname.getText();
        String sn = txtUserSurname.getText();
        String ue = txtUserEmail.getText();
        String pw = txtUserPass.getText();
        String dob = datePicker.getDate().format(DateTimeFormatter.ofPattern("uuuu-MM-dd"));
        String cn = txtUserContact.getText();
        String st = GroupButtonUtils(); 
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "Save details?",
                "Change Details",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title
        // Check if both passwords are equals
        if(choosen == 0) {
            // Connects with the database
            Con.ConnectDatabase();
            String SQL;
            
            // Decide if it is a new user or update the details of a existing one
            if(btnUserSave.getText().equals("Save")) {
                
                if(checkEmail(txtUserEmail.getText())) {
            
                    JOptionPane.showMessageDialog(null, "The email already exists. Please,"
                            + "provide a valid email.", 
                            "Email exists", JOptionPane.WARNING_MESSAGE);
                }
                else {
                    
                    // Create a query to the database to add the information               
                    SQL = "INSERT INTO `user`(`firstname`, `surname`, `dob`, "
                        + "`email`, `pass`, `contactNo`, `status`) VALUES "
                        + "(?,?,?,?,?,?,?)";

                    // Sends the query
                    try(Connection conn = Con.connection;

                        PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                        preparedStmt.setString(1, fn);
                        preparedStmt.setString(2, sn);
                        preparedStmt.setString(3, dob);
                        preparedStmt.setString(4, ue);
                        preparedStmt.setString(5, pw);
                        preparedStmt.setString(6, cn);
                        preparedStmt.setString(7, st);

                        preparedStmt.execute();
                    }
                    catch(SQLException ex) {

                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
                JOptionPane.showMessageDialog(null, "Details saved successfully!");
            }
            else {
                
                // Connects with the database
                Con.ConnectDatabase();

                // Send a query to the database to retrieve information
                SQL = "SELECT * FROM user WHERE userID = '" +id +"'";

                // Executes the given SQL statement, which returns a single ResultSet object
                Con.result = Con.statement.executeQuery(SQL);

                // If the query finds a row with the given information from the textfields
                if(Con.result.next()) {
                    
                    // Create a query to update the information of ther user
                    SQL = "UPDATE `user` SET `firstname` = ?, `surname` = ?, "
                            + "`dob` = ?, `email` = ?, `pass` = ?, "
                            + "`contactNo` = ?, `status` = ? WHERE `userID` = ?";

                    // Sends the query
                    try(Connection conn = Con.connection;

                        PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                        preparedStmt.setString(1, fn);
                        preparedStmt.setString(2, sn);
                        preparedStmt.setString(3, dob);
                        preparedStmt.setString(4, ue);
                        preparedStmt.setString(5, pw);
                        preparedStmt.setString(6, cn);
                        preparedStmt.setString(7, st);
                        preparedStmt.setString(8, id);

                        preparedStmt.execute();
                    }
                    catch(SQLException ex) {

                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Details updated successfully!");
                btnUserSave.setText("Save");
            }
            
            emptyFields();
            disenable();
            btnUserAdd.setEnabled(true);
            btnUserList.setEnabled(true);
        }
    }
    
     /**
     * Connects with the database to display the details of the user
     * retrieved from the database
     * @param SQL passed from btnUserSearchActionPerformed method
     */
    public void displayDetails(String SQL) {
        
        try{

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();
            
            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // If the query finds a row with the given information from the textfields
            if(Con.result.next()) {
                
                txtUserId.setText(Con.result.getString("userID"));
                txtUserFirstname.setText(Con.result.getString("firstname"));
                txtUserSurname.setText(Con.result.getString("surname"));
                txtUserEmail.setText(Con.result.getString("email"));
                txtUserPass.setText(Con.result.getString("pass"));
                datePicker.setText(Con.result.getString("dob"));
                txtUserJoin.setText(Con.result.getString("joinDate"));
                txtUserContact.setText(Con.result.getString("contactNo"));
                switch (Con.result.getString("status")) {
                    case "Inactive" -> radUserInact.setSelected(true);
                    case "Active" -> radUserAct.setSelected(true);
                    default -> radUserBlock.setSelected(true);
                    
                }
                
                btnUserEdit.setEnabled(true);
                btnUserDelete.setEnabled(true);
            }
            else {

                JOptionPane.showMessageDialog(null, "Invalid identificator");
            }
            
            Con.DisconnectDatabase();
        }
        catch(SQLException ex) {
            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
       
    }

    // Getter
    public JPanel getUserPanel() {
        return userPanel;
    }

    /**
     * Enable the fields
     */
    @Override
    public void enable() {
        
        // Enable cancel and save buttons
        btnUserCancel.setEnabled(true);
        btnUserSave.setEnabled(true);
        
        // Enable all the fields
        txtUserContact.setEnabled(true);
        txtUserEmail.setEnabled(true);
        txtUserFirstname.setEnabled(true);
        txtUserPass.setEnabled(true);
        txtUserSurname.setEnabled(true);
        datePicker.setEnabled(true);
        radUserAct.setEnabled(true);
        radUserBlock.setEnabled(true);
        radUserInact.setEnabled(true);
    }
    
    /**
     * Disenable the fields
     */
    public void disenable() {
        
        // Disenable cancel and save buttons
        btnUserCancel.setEnabled(false);
        btnUserSave.setEnabled(false);
        
        // Disenable all the fields
        txtUserContact.setEnabled(false);
        txtUserEmail.setEnabled(false);
        txtUserFirstname.setEnabled(false);
        txtUserPass.setEnabled(false);
        txtUserSurname.setEnabled(false);
        datePicker.setEnabled(false);
        radUserAct.setEnabled(false);
        radUserBlock.setEnabled(false);
        radUserInact.setEnabled(false);
    }
    
    /**
     * Reset the fields
     */
    public void emptyFields() {
        
        txtUserId.setText("");
        txtUserSearch.setText("");
        txtUserContact.setText("");
        txtUserEmail.setText("");
        txtUserFirstname.setText("");
        txtUserJoin.setText("");
        txtUserPass.setText("");
        txtUserSurname.setText("");
        datePicker.setText("");
        radGroupUserStatus.clearSelection();
    }
    
    /**
     * Loop through the radio buttons to check which is select
     * @return button selected parsed to string
     */
    public String GroupButtonUtils() {
        
        for (Enumeration<AbstractButton> buttons = radGroupUserStatus.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }

        return null;
    } 
    
    /**
     * Check if there is any empty field in the form
     * @return true or false
     */
    public boolean checkEmptyFields() {
        
        boolean result = false;
        
        if(txtUserContact.getText().isBlank() || 
                txtUserEmail.getText().isBlank() || 
                txtUserFirstname.getText().isBlank() || 
                txtUserPass.getText().isBlank() || 
                txtUserSurname.getText().isBlank() || 
                datePicker.getText().isBlank() || 
                GroupButtonUtils() == null) {
            
            result = true;
        }
        
        return result;
    }
    
    /**
     * Check in the database if there is another user with the same email
     * @param userEmail
     * @return 
     */
    public boolean checkEmail(String userEmail) {
        
        boolean result = false;
        
        try{

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();

            // Send a query to the database to retrieve information
            String SQL = "SELECT * FROM user WHERE email = '" +userEmail +"'";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // If the query finds a row with the given information from the textfields
            if(Con.result.next()) {
                
                result = true;
            }

        }
        catch(SQLException ex) {
            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
              
        return result;
    }
    
    /**
     * Adjust the width of the columns of the table to the text in the cells
     * @param table 
     */
    public void resizeColumnWidth(JTable table) {
    
        for (int column = 0; column < table.getColumnCount(); column++) {
            
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                //  We've exceeded the maximum width, no need to check other rows
                if (preferredWidth >= maxWidth) {
                    
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth( preferredWidth );
        }
    }
    
    
//    public static String encrypt(final String pass) {
//    try{
//        final MessageDigest digest = MessageDigest.getInstance("SHA-256");
//        final byte[] hash = digest.digest(pass.getBytes("UTF-8"));
//        final StringBuilder hexString = new StringBuilder();
//        for (int i = 0; i < hash.length; i++) {
//            final String hex = Integer.toHexString(0xff & hash[i]);
//            if(hex.length() == 1) 
//              hexString.append('0');
//            hexString.append(hex);
//        }
//        return hexString.toString();
//    } catch(UnsupportedEncodingException | NoSuchAlgorithmException ex){
//       throw new RuntimeException(ex);
//    }
//}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUserAdd;
    private javax.swing.JButton btnUserCancel;
    private javax.swing.JButton btnUserDelete;
    private javax.swing.JButton btnUserEdit;
    private javax.swing.JButton btnUserList;
    private javax.swing.JButton btnUserSave;
    private javax.swing.JButton btnUserSearch;
    private javax.swing.JComboBox<String> cmbUserSearch;
    private com.github.lgooddatepicker.components.DatePicker datePicker;
    private javax.swing.JLabel lbUserFirstname;
    private javax.swing.JLabel lblUserContact;
    private javax.swing.JLabel lblUserDOB;
    private javax.swing.JLabel lblUserEmail;
    private javax.swing.JLabel lblUserId;
    private javax.swing.JLabel lblUserJoin;
    private javax.swing.JLabel lblUserPass;
    private javax.swing.JLabel lblUserSearch;
    private javax.swing.JLabel lblUserStatus;
    private javax.swing.JLabel lblUserSurname;
    private javax.swing.JLabel lbluserPnl;
    private javax.swing.ButtonGroup radGroupUserStatus;
    private javax.swing.JRadioButton radUserAct;
    private javax.swing.JRadioButton radUserBlock;
    private javax.swing.JRadioButton radUserInact;
    private javax.swing.JFormattedTextField txtUserContact;
    private javax.swing.JTextField txtUserEmail;
    private javax.swing.JTextField txtUserFirstname;
    private javax.swing.JTextField txtUserId;
    private javax.swing.JTextField txtUserJoin;
    private javax.swing.JPasswordField txtUserPass;
    private javax.swing.JTextField txtUserSearch;
    private javax.swing.JTextField txtUserSurname;
    private javax.swing.JPanel userPanel;
    // End of variables declaration//GEN-END:variables

    
}
