/*
 * Movie class. TVShows would be able to add a new shows, edit or delete series
 */
package back_end;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 * @author Francisco Jose Bejarano Escano
 * EC1825088
 * @date 01/05/2022
 * @location Edinburgh
 * @version 1.1
 */
public class TVShow extends javax.swing.JPanel {

    
    /**
     * Creates new form User
     */
    public TVShow() {
        initComponents();
        
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tvPanel = new javax.swing.JPanel();
        tvSearchPanel = new javax.swing.JPanel();
        lblTvPnl = new javax.swing.JLabel();
        lblTvSearch = new javax.swing.JLabel();
        cmbTvSearch = new javax.swing.JComboBox<>();
        txtTvSearch = new javax.swing.JTextField();
        btnTvSearch = new javax.swing.JButton();
        tvFormPanel = new javax.swing.JPanel();
        lblTvId = new javax.swing.JLabel();
        txtTvId = new javax.swing.JTextField();
        lblTvTitle = new javax.swing.JLabel();
        txtTvTitle = new javax.swing.JTextField();
        lblTvCategory = new javax.swing.JLabel();
        cmbTvCat = new javax.swing.JComboBox<>();
        lblTvRel = new javax.swing.JLabel();
        datePickerTv = new com.github.lgooddatepicker.components.DatePicker();
        lblTvSin = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTvSin = new javax.swing.JTextArea();
        txtTvSeason = new javax.swing.JFormattedTextField();
        lblTvSeason = new javax.swing.JLabel();
        lblTvLang = new javax.swing.JLabel();
        txtTvLang = new javax.swing.JTextField();
        lblTvAdded = new javax.swing.JLabel();
        txtTvAdded = new javax.swing.JTextField();
        lblTvUrl = new javax.swing.JLabel();
        txtTvUrl = new javax.swing.JTextField();
        btnTvPlay = new javax.swing.JButton();
        btnTvAdd = new javax.swing.JButton();
        btnTvSave = new javax.swing.JButton();
        btnTvCancel = new javax.swing.JButton();
        btnTvList = new javax.swing.JButton();
        btnTvDelete = new javax.swing.JButton();
        btnTvEdit = new javax.swing.JButton();
        medTvCover = new javax.swing.JLabel();
        btnTvExa = new javax.swing.JButton();
        lblTvPath = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        lblTvPnl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTvPnl.setText("<HTML><u>TV Shows</u><HTML>");

        lblTvSearch.setText("Search by");

        cmbTvSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Title" }));

        txtTvSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTvSearchKeyReleased(evt);
            }
        });

        btnTvSearch.setText("Search");
        btnTvSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tvSearchPanelLayout = new javax.swing.GroupLayout(tvSearchPanel);
        tvSearchPanel.setLayout(tvSearchPanelLayout);
        tvSearchPanelLayout.setHorizontalGroup(
            tvSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tvSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tvSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTvPnl)
                    .addGroup(tvSearchPanelLayout.createSequentialGroup()
                        .addComponent(lblTvSearch)
                        .addGap(18, 18, 18)
                        .addComponent(cmbTvSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTvSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTvSearch)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        tvSearchPanelLayout.setVerticalGroup(
            tvSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tvSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTvPnl)
                .addGap(18, 18, 18)
                .addGroup(tvSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTvSearch)
                    .addComponent(cmbTvSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTvSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTvSearch))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        lblTvId.setText("ID: ");

        txtTvId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTvId.setEnabled(false);

        lblTvTitle.setText("Title:");

        txtTvTitle.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtTvTitle.setEnabled(false);

        lblTvCategory.setText("Category:");

        cmbTvCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Category", "Action" }));
        cmbTvCat.setSelectedItem(0);
        cmbTvCat.setEnabled(false);

        lblTvRel.setText("Released:");

        datePickerTv.setEnabled(false);

        lblTvSin.setText("Sinopsis:");

        txtTvSin.setColumns(20);
        txtTvSin.setRows(5);
        txtTvSin.setEnabled(false);
        jScrollPane1.setViewportView(txtTvSin);
        txtTvSin.setLineWrap(true);

        txtTvSeason.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtTvSeason.setEnabled(false);

        lblTvSeason.setText("Seasons:");

        lblTvLang.setText("Language:");

        txtTvLang.setEnabled(false);

        lblTvAdded.setText("Added:");

        txtTvAdded.setEnabled(false);

        lblTvUrl.setText("TV Show URL:");

        txtTvUrl.setEnabled(false);

        btnTvPlay.setText("Play");
        btnTvPlay.setEnabled(false);
        btnTvPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvPlayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tvFormPanelLayout = new javax.swing.GroupLayout(tvFormPanel);
        tvFormPanel.setLayout(tvFormPanelLayout);
        tvFormPanelLayout.setHorizontalGroup(
            tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tvFormPanelLayout.createSequentialGroup()
                .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tvFormPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTvCategory)
                            .addComponent(lblTvSin)
                            .addComponent(lblTvSeason)
                            .addComponent(lblTvAdded))
                        .addGap(18, 18, 18)
                        .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tvFormPanelLayout.createSequentialGroup()
                                .addComponent(cmbTvCat, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTvRel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datePickerTv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addGroup(tvFormPanelLayout.createSequentialGroup()
                                .addComponent(txtTvSeason, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTvLang)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTvLang))
                            .addGroup(tvFormPanelLayout.createSequentialGroup()
                                .addComponent(txtTvAdded, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(tvFormPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblTvId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTvId, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTvTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTvTitle))
                    .addGroup(tvFormPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTvUrl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTvUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTvPlay)))
                .addContainerGap())
        );
        tvFormPanelLayout.setVerticalGroup(
            tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tvFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTvId)
                    .addComponent(txtTvId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTvTitle)
                    .addComponent(txtTvTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTvCategory)
                    .addComponent(cmbTvCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTvRel)
                    .addComponent(datePickerTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTvSin)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTvSeason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTvSeason)
                    .addComponent(lblTvLang)
                    .addComponent(txtTvLang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTvAdded)
                    .addComponent(txtTvAdded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tvFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTvUrl)
                    .addComponent(txtTvUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTvPlay))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cmbTvCat.removeAllItems();

        cmbTvCat.addItem("Select a Category");
        //ArrayList<Discount> names = new ArrayList<Discount>();

        String SQL = "SELECT name FROM category ";
        try {
            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();

            // Connects with the database
            Con.ConnectDatabase();

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            while(Con.result.next()){
                cmbTvCat.addItem(Con.result.getString("name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
        }
        final LocalDate today = LocalDate.now();
        datePickerTv.getSettings().setDateRangeLimits(today.minusYears(100), today.plusYears(100));

        btnTvAdd.setText("Add TV Show");
        btnTvAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvAddActionPerformed(evt);
            }
        });

        btnTvSave.setText("Save");
        btnTvSave.setEnabled(false);
        btnTvSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvSaveActionPerformed(evt);
            }
        });

        btnTvCancel.setText("Cancel");
        btnTvCancel.setEnabled(false);
        btnTvCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvCancelActionPerformed(evt);
            }
        });

        btnTvList.setText("List");
        btnTvList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvListActionPerformed(evt);
            }
        });

        btnTvDelete.setText("Delete");
        btnTvDelete.setEnabled(false);
        btnTvDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvDeleteActionPerformed(evt);
            }
        });

        btnTvEdit.setText("Edit");
        btnTvEdit.setEnabled(false);
        btnTvEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvEditActionPerformed(evt);
            }
        });

        medTvCover.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        medTvCover.setForeground(new java.awt.Color(60, 63, 65));
        medTvCover.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        medTvCover.setText("-");
        medTvCover.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        medTvCover.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        medTvCover.setMaximumSize(new java.awt.Dimension(15, 45));

        btnTvExa.setText("Examine");
        btnTvExa.setEnabled(false);
        btnTvExa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTvExaActionPerformed(evt);
            }
        });

        lblTvPath.setForeground(new java.awt.Color(60, 63, 65));
        lblTvPath.setText("jLabel1");
        lblTvPath.setEnabled(false);
        lblTvPath.setFocusable(false);
        lblTvPath.setOpaque(true);

        javax.swing.GroupLayout tvPanelLayout = new javax.swing.GroupLayout(tvPanel);
        tvPanel.setLayout(tvPanelLayout);
        tvPanelLayout.setHorizontalGroup(
            tvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tvPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(tvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tvSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tvPanelLayout.createSequentialGroup()
                        .addComponent(tvFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(medTvCover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnTvExa, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                            .addComponent(lblTvPath)))
                    .addGroup(tvPanelLayout.createSequentialGroup()
                        .addComponent(btnTvAdd)
                        .addGap(6, 6, 6)
                        .addComponent(btnTvSave)
                        .addGap(6, 6, 6)
                        .addComponent(btnTvCancel)
                        .addGap(6, 6, 6)
                        .addComponent(btnTvList)
                        .addGap(89, 89, 89)
                        .addComponent(btnTvDelete)
                        .addGap(6, 6, 6)
                        .addComponent(btnTvEdit)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        tvPanelLayout.setVerticalGroup(
            tvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tvPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(tvSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(tvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tvFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tvPanelLayout.createSequentialGroup()
                        .addComponent(medTvCover, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTvExa)
                        .addGap(18, 18, 18)
                        .addComponent(lblTvPath)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(tvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTvAdd)
                    .addComponent(btnTvSave)
                    .addComponent(btnTvCancel)
                    .addComponent(btnTvList)
                    .addComponent(btnTvDelete)
                    .addComponent(btnTvEdit)))
        );

        lblTvPath.setVisible(false);

        add(tvPanel, "card2");

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

//GEN-FIRST:event_btnAdminSaveActionPerformed

//GEN-LAST:event_btnAdminSaveActionPerformed

    /**
     * Action Event that enables all the editable fields of the tvshow panel
     * Update the details of the serie selected in the database
     * @param evt 
     */
    private void btnTvEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvEditActionPerformed
        // TODO add your handling code here:
        enable();
        btnTvSave.setText("Update");
        btnTvAdd.setEnabled(false);
    }//GEN-LAST:event_btnTvEditActionPerformed

    /**
     * Delete from the database the details displayed in the screen
     * @param evt 
     */
    private void btnTvDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvDeleteActionPerformed
        // TODO add your handling code here:
        // Instance of the ConnectMySQL class
        ConnectMySQL Con = new ConnectMySQL();

        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null,//parent container of JOptionPane
            "Are you sure you want to delete this tv show?",
            "Delete user",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,//do not use a custom Icon
            options,//the titles of buttons
            options[1]);//default button title

        if(choosen == 0) {

            JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "The tv show will be deleted. Continue?",
                "Delete tv show",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title

            if(choosen == 0) {

                // Connects with the database
                Con.ConnectDatabase();

                // Create a query to the database to delete the information
                String SQL = "DELETE FROM `tvshow` WHERE tvId = ?";

                // Sends the query
                try(Connection conn = Con.connection;
                    PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                    preparedStmt.setString(1, txtTvId.getText());

                    preparedStmt.execute();
                }
                catch(SQLException ex) {

                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            }
        }
        JOptionPane.showMessageDialog(null, "The tv show has been deleted");
        emptyFields();
    }//GEN-LAST:event_btnTvDeleteActionPerformed

    /**
     * Display a list of series registered
     * @param evt 
     */
    private void btnTvListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvListActionPerformed

        try {

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();

            // Connects with the database
            Con.ConnectDatabase();

            // Create a query to the database to count the number of rows in the table
            String SQL = "SELECT COUNT(tvId) FROM tvshow";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            Con.result.next();
            // Store the number of rows obtained with the query
            int rows = Con.result.getInt(1);

            // Create a query to the database to retrieve the information
            SQL = "SELECT * FROM tvshow";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // Stablish the headers of the columns
            String columns[] = {"ID", "Title", "Category", "Released", "Language",
                "No Seasons", "Added"};

            // Number of rows (obtained with the query) and number of columns of the table
            String data[][] = new String[rows][7];

            int i = 0; // Store the number of the row
            while(Con.result.next()) {

                // Get the date from the database
                String id = Con.result.getString("tvId");
                String title = Con.result.getString("title");
                String category = Con.result.getString("category");
                String released = Con.result.getString("released");
                String language = Con.result.getString("language");
                String seasons = Con.result.getString("tv_seasons");
                String added = Con.result.getString("added");

                // Populate the columns
                data[i][0] = id;
                data[i][1] = title;
                data[i][2] = category;
                data[i][3] = released;
                data[i][4] = language;
                data[i][5] = seasons;
                data[i][6] = added;

                // It will allow to jump to the next row
                i++;
            }

            // Create the table where it will be placed the details retrieved
            // Model of a table with rows and columns
            DefaultTableModel model = new DefaultTableModel(data, columns);
            model.isCellEditable(rows, 9);
            JTable table = new JTable(model);
            table.setShowGrid(true); // Shows the lines of the table
            resizeColumnWidth(table);
            table.getAutoscrolls();// Display scroll bar when needed

            JScrollPane pane = new JScrollPane(table);// Panel with scroll bar
            JFrame f = new JFrame("TV SHOWS");// Frame where will be placed the table
            f.add(pane);
            f.pack();
            f.setLocationRelativeTo(null);
            f.setSize(680, 250);
            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            f.setVisible(true);
            f.setIconImage(new ImageIcon(getClass().getResource("/images/favicon.png")).getImage());

            table.addMouseListener(new MouseAdapter() {
                /**
                * By double clicking one of the items from the table, it will
                * display those details into the table,and close the window
                * @param mouseEvent
                */
                @Override
                public void mousePressed(MouseEvent mouseEvent) {
                    JTable table =(JTable) mouseEvent.getSource();
                    Point point = mouseEvent.getPoint();
                    int row = table.rowAtPoint(point);
                    if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {

                        // Create a query to the database to retrieve information using the ID
                        String SQL = "SELECT * FROM tvshow WHERE tvId = '" +data[row][0] +"'";
                        // Calls the method to display the info
                        displayDetails(SQL);

                        // Dispose the frame with the table
                        f.dispose();
                    }

                }
            });
        }
        catch(SQLException e) {

            e.printStackTrace();
        }
    }//GEN-LAST:event_btnTvListActionPerformed

    /**
     * Action Event that clean the fields and call a method to disenable the fields
     * @param evt 
     */
    private void btnTvCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvCancelActionPerformed
        // TODO add your handling code here:
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null, //parent container of JOptionPane
            "Do you want to cancel?\n(All the details entered will be cleaned)",
            "Cancel",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,//do not use a custom Icon
            options,//the titles of buttons
            options[1]);//default button title

        if(choosen == 0) {

            emptyFields();

            disenable();

            btnTvEdit.setEnabled(false);
            btnTvDelete.setEnabled(false);
            btnTvAdd.setEnabled(true);
            btnTvList.setEnabled(true);
            btnTvSave.setText("Save");
        }
    }//GEN-LAST:event_btnTvCancelActionPerformed

    /**
     * Action Event that calls the method saveUser only if all the fields
     * are filled
     * @param evt 
     */
    private void btnTvSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvSaveActionPerformed
        // TODO add your handling code here:
        if(checkEmptyFields()) {
            
            JOptionPane.showMessageDialog(null, "All fields must be filled", 
                    "Empty Field", JOptionPane.WARNING_MESSAGE);
        }
        else {
            
            try {  
                saveTv();
            } catch (SQLException ex) {
                Logger.getLogger(TVShow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnTvSaveActionPerformed

    /**
     * Action Event that enables the fields to add a new show
     * @param evt 
     */
    private void btnTvAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvAddActionPerformed
        // TODO add your handling code here:
        // Empty all the fields
        emptyFields();

        enable();

        btnTvAdd.setEnabled(false);
        btnTvList.setEnabled(false);
        btnTvEdit.setEnabled(false);
        btnTvDelete.setEnabled(false);
        btnTvSave.setText("Save");
    }//GEN-LAST:event_btnTvAddActionPerformed

    /**
     * Search through the database for a tv shows by its ID or title and enable
     * edit and delete buttons
     * @param evt 
     */
    private void btnTvSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvSearchActionPerformed
        // TODO add your handling code here:

        // Pop-up message in the event the field is empty
        if(txtTvSearch.getText().isBlank()) {

            JOptionPane.showMessageDialog(null, "The field is empty",
                "Empty Field", JOptionPane.WARNING_MESSAGE);
        }
        else if(cmbTvSearch.getSelectedItem().equals("ID")) {

            // Create a query to the database to retrieve information using the ID
            String SQL = "SELECT * FROM tvshow WHERE tvId = '" +txtTvSearch.getText() +"'";
            displayDetails(SQL);

        }
        else {

            // Create a query to the database to retrieve information using the title
            String SQL = "SELECT * FROM tvshow WHERE title = '" +txtTvSearch.getText() +"'";
            displayDetails(SQL);
            
        }

    }//GEN-LAST:event_btnTvSearchActionPerformed

    /**
     * Pressing the key Enter is like pressing the Search button
     * @param evt 
     */
    private void txtTvSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTvSearchKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {

            btnTvSearch.doClick();
            // Transfer the focus to avoid poping the window up again
            btnTvSearch.transferFocus();
        }
    }//GEN-LAST:event_txtTvSearchKeyReleased

    /**
     * Open a file browser to select the cover image of the tv show
     * @param evt 
     */
    private void btnTvExaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvExaActionPerformed
        // TODO add your handling code here:
        // String where the path of the file selected will be stored
        String path;
        // Allows to open a dialog window in which the user can select a file
        JFileChooser fc = new JFileChooser("C:/Users/Fran/OneDrive - Edinburgh "
                + "College/HND Computing Software Development/Year 2/Graded Unit"
                + "/Webflix/Back-End/Webflix1.1/src/images/tvshows");
        // Filter the type of archives shown in the file explorer
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG, PNG & GIF Images", "jpg", "gif", "png");
        fc.setFileFilter(filter);
        /* In the showOpenDialog parameter the window is indicated to which it 
        will be associated. With the value this it is associated to the window 
        that opens it */
        int accept = fc.showOpenDialog(this);
        // Check if OK has been pressed
        if(accept == JFileChooser.APPROVE_OPTION) {
            
            // Create a File object with the chosen file
            File selectedFile = fc.getSelectedFile();
            BufferedImage img = null;
            // Path of the file
            path = "images/tvshows/" +selectedFile.getName();
            try {
                img = ImageIO.read(selectedFile);
            } catch (IOException ex) {
                Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
            }
            Image dimg = img.getScaledInstance(medTvCover.getWidth(), medTvCover.getHeight(),
                Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(dimg);
            // Embed the file selected into the label in the frame
            medTvCover.setIcon(imageIcon);
            lblTvPath.setText(path);
        }
    }//GEN-LAST:event_btnTvExaActionPerformed

    /**
     * Passes the URL entered in the JTextfield to be parsed in URI
     * @param evt 
     */
    private void btnTvPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTvPlayActionPerformed
        // TODO add your handling code here:
       URL url = null;
        try {
            url = new URL(txtTvUrl.getText());
        }
        catch (MalformedURLException ex) {
            Logger.getLogger(TVShow.class.getName()).log(Level.SEVERE, null, ex);
        }
       
       openWebpage(url);
    }//GEN-LAST:event_btnTvPlayActionPerformed

    /**
     * Method to save the details of the show
     * @throws java.sql.SQLException
     */
    public void saveTv() throws SQLException {
        
        // Instance of the ConnectMySQL class
        ConnectMySQL Con = new ConnectMySQL();
        // Get the text from the fielda of the UI
        String id = txtTvId.getText();
        String tt = txtTvTitle.getText();
        String ct = cmbTvCat.getSelectedItem().toString();
        String cv = lblTvPath.getText();
        String sn = txtTvSin.getText();
        String rl = datePickerTv.getDate().format(DateTimeFormatter.ofPattern("uuuu-MM-dd"));
        String ln = txtTvLang.getText();
        String dr = txtTvSeason.getText();
        String ur = txtTvUrl.getText();
            String part1 = ur.substring(0, 24);
            String part2 = ur.substring(32);
            ur = part1 +"embed/" +part2;
        Object [] options = {"Yes",
            "No"};
        int choosen = JOptionPane.showOptionDialog(null,//parent container of JOptionPane
                "Save details?",
                "Change Details",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                options[1]);//default button title
        // Check if both passwords are equals
        if(choosen == 0) {
            // Connects with the database
            Con.ConnectDatabase();
            String SQL;
            
            // Decide if it is a new user or update the details of a existing one
            if(btnTvSave.getText().equals("Save")) {
                
                if(checkTitle(txtTvTitle.getText())) {
            
                    JOptionPane.showMessageDialog(null, "This TV show already exists.", 
                            "TV show exists", JOptionPane.WARNING_MESSAGE);
                }
                else {
                    
                    // Create a query to the database to add the information               
                    SQL = "INSERT INTO `tvshow`(`title`, `category`, `cover`, "
                        + "`sinopsis`, `released`, `language`, `tv_seasons`, "
                            + "`tv_link`) VALUES (?,?,?,?,?,?,?,?)";

                    // Sends the query
                    try(Connection conn = Con.connection;

                        PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                        preparedStmt.setString(1, tt);
                        preparedStmt.setString(2, ct);
                        preparedStmt.setString(3, cv);
                        preparedStmt.setString(4, sn);
                        preparedStmt.setString(5, rl);
                        preparedStmt.setString(6, ln);
                        preparedStmt.setString(7, dr);
                        preparedStmt.setString(8, ur);

                        preparedStmt.execute();
                    }
                    catch(SQLException ex) {

                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
                JOptionPane.showMessageDialog(null, "Details saved successfully!");
            }
            else {
                
                // Connects with the database
                Con.ConnectDatabase();

                // Send a query to the database to retrieve information
                SQL = "SELECT * FROM tvshow WHERE tvId = '" +id +"'";

                // Executes the given SQL statement, which returns a single ResultSet object
                Con.result = Con.statement.executeQuery(SQL);

                // If the query finds a row with the given information from the textfields
                if(Con.result.next()) {
                    
                    // Create a query to update the information of ther user
                    SQL = "UPDATE `tvshow` SET `title` = ?, `category` = ?, "
                            + "`cover` = ?, `sinopsis` = ?, `released` = ?, "
                            + "`language` = ?, `tv_seasons` = ?, `tv_link` = ? "
                            + "WHERE `tvId` = ?";

                    // Sends the query
                    try(Connection conn = Con.connection;

                        PreparedStatement preparedStmt = conn.prepareStatement(SQL)) {

                        preparedStmt.setString(1, tt);
                        preparedStmt.setString(2, ct);
                        preparedStmt.setString(3, cv);
                        preparedStmt.setString(4, sn);
                        preparedStmt.setString(5, rl);
                        preparedStmt.setString(6, ln);
                        preparedStmt.setString(7, dr);
                        preparedStmt.setString(8, ur);
                        preparedStmt.setString(9, id);

                        preparedStmt.execute();
                    }
                    catch(SQLException ex) {

                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Details updated successfully!");
                btnTvSave.setText("Save");
            }
            
            emptyFields();
            disenable();
        }
    }
    
     /**
     * Connects with the database to display the details of the show
     * retrieved from the database
     * @param SQL passed from btnUserSearchActionPerformed method
     */
    public void displayDetails(String SQL) {
        
        try{

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();
            
            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // If the query finds a row with the given information from the textfields
            if(Con.result.next()) {
                
                txtTvId.setText(Con.result.getString("tvId"));
                txtTvTitle.setText(Con.result.getString("title"));
                cmbTvCat.setSelectedItem(Con.result.getString("category"));
                lblTvPath.setText(Con.result.getString("cover"));
                txtTvSin.setText(Con.result.getString("sinopsis"));
                datePickerTv.setText(Con.result.getString("released"));
                txtTvLang.setText(Con.result.getString("language"));
                txtTvSeason.setText(Con.result.getString("tv_seasons"));
                txtTvUrl.setText(Con.result.getString("tv_link"));
                txtTvAdded.setText(Con.result.getString("added"));

               //Resize the picture
                ImageIcon imageIcon = new ImageIcon(getClass().getResource("/" +lblTvPath.getText()));
                Image dimg = imageIcon.getImage().getScaledInstance(medTvCover.getWidth(), 
                    medTvCover.getHeight(), Image.SCALE_SMOOTH);
                Icon scaledIcon = new ImageIcon(dimg);

                // Embed the file selected into the label in the frame
                medTvCover.setIcon(scaledIcon); 
                btnTvEdit.setEnabled(true);
                btnTvDelete.setEnabled(true);
                btnTvPlay.setEnabled(true);
            }
            else {

                JOptionPane.showMessageDialog(null, "Invalid identificator");
            }
            
            Con.DisconnectDatabase();
        }
        catch(SQLException ex) {
            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
       
    }

    // Getter
    public JPanel getTvPanel() {
        return tvPanel;
    }

    /**
     * Enable the fields
     */
    @Override
    public void enable() {
        
        // Enable cancel and save buttons
        btnTvCancel.setEnabled(true);
        btnTvSave.setEnabled(true);
        btnTvExa.setEnabled(true);
        
        // Enable all the fields
        txtTvTitle.setEnabled(true);
        cmbTvCat.setEnabled(true);
        txtTvSin.setEnabled(true);
        datePickerTv.setEnabled(true);
        txtTvLang.setEnabled(true);
        txtTvSeason.setEnabled(true);
        txtTvUrl.setEnabled(true);
    }
    
    /**
     * Disenable the fields
     */
    public void disenable() {
        
        // Disenable cancel and save buttons
        btnTvCancel.setEnabled(false);
        btnTvSave.setEnabled(false);
        btnTvExa.setEnabled(false);
        
        // Disenable all the fields
        txtTvTitle.setEnabled(false);
        cmbTvCat.setEnabled(false);
        txtTvSin.setEnabled(false);
        datePickerTv.setEnabled(false);
        txtTvLang.setEnabled(false);
        txtTvSeason.setEnabled(false);
        txtTvUrl.setEnabled(false);
        
        // Enable Add Movie and List buttons
        btnTvAdd.setEnabled(true);
        btnTvList.setEnabled(true);
    }
    
    /**
     * Reset the fields
     */
    public void emptyFields() {
        
        txtTvSearch.setText("");
        txtTvId.setText("");
        txtTvTitle.setText("");
        cmbTvCat.setSelectedItem("Select a Category");
        medTvCover.setIcon(null);
        txtTvSin.setText("");
        datePickerTv.setText("");
        txtTvLang.setText("");
        txtTvSeason.setText("");
        txtTvUrl.setText("");
        txtTvAdded.setText("");
    }

    
    /**
     * Check if there is any empty field in the form
     * @return true or false
     */
    public boolean checkEmptyFields() {
        
        boolean result = false;

        if(txtTvTitle.getText().isBlank() || 
                cmbTvCat.getSelectedItem().equals("Select a Category") || 
                lblTvPath.getText().isBlank() || 
                txtTvSin.getText().isBlank() || 
                datePickerTv.getText().isBlank() || 
                txtTvLang.getText().isBlank() ||
                txtTvSeason.getText().isBlank() ||
                txtTvUrl.getText().isBlank()) {
            
            result = true;
        }
        
        return result;
    }
    
    /**
     * Check in the database if there is another tv show with the same title
     * @param tvTitle
     * @return 
     */
    public boolean checkTitle(String tvTitle) {
        
        boolean result = false;
        
        try{

            // Instance of the ConnectMySQL class
            ConnectMySQL Con = new ConnectMySQL();
            
            // Connects with the database
            Con.ConnectDatabase();

            // Send a query to the database to retrieve information
            String SQL = "SELECT * FROM tvshow WHERE title = '" +tvTitle +"'";

            // Executes the given SQL statement, which returns a single ResultSet object
            Con.result = Con.statement.executeQuery(SQL);

            // If the query finds a row with the given information from the textfields
            if(Con.result.next()) {
                
                result = true;
            }

        }
        catch(SQLException ex) {
            
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
              
        return result;
    }
    
    /**
     * Adjust the width of the columns of the table to the text in the cells
     * @param table 
     */
    public void resizeColumnWidth(JTable table) {
    
        for (int column = 0; column < table.getColumnCount(); column++) {
    
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                // Exceeded the maximum width, no need to check other rows
                if (preferredWidth >= maxWidth) {
                    
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
    }
    
    /**
     * Parse URL to URI
     * @param url
     * @return 
     */
    public static boolean openWebpage(URL url) {
        try {
            return openWebpage(url.toURI());
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return false;
    }
    
    /**
     * Open the default browser in the user computer
     * @param uri
     * @return 
     */
    public static boolean openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
                return true;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return false;
    }
    
    /**
     * Cells of the List table are not editable
     * @param row
     * @param column
     * @return 
     */
    public boolean isCellEditable(int row, int column) {
      return false;//This causes all cells to be not editable
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTvAdd;
    private javax.swing.JButton btnTvCancel;
    private javax.swing.JButton btnTvDelete;
    private javax.swing.JButton btnTvEdit;
    private javax.swing.JButton btnTvExa;
    private javax.swing.JButton btnTvList;
    private javax.swing.JButton btnTvPlay;
    private javax.swing.JButton btnTvSave;
    private javax.swing.JButton btnTvSearch;
    private javax.swing.JComboBox<String> cmbTvCat;
    private javax.swing.JComboBox<String> cmbTvSearch;
    private com.github.lgooddatepicker.components.DatePicker datePickerTv;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTvAdded;
    private javax.swing.JLabel lblTvCategory;
    private javax.swing.JLabel lblTvId;
    private javax.swing.JLabel lblTvLang;
    private javax.swing.JLabel lblTvPath;
    private javax.swing.JLabel lblTvPnl;
    private javax.swing.JLabel lblTvRel;
    private javax.swing.JLabel lblTvSearch;
    private javax.swing.JLabel lblTvSeason;
    private javax.swing.JLabel lblTvSin;
    private javax.swing.JLabel lblTvTitle;
    private javax.swing.JLabel lblTvUrl;
    private javax.swing.JLabel medTvCover;
    private javax.swing.JPanel tvFormPanel;
    private javax.swing.JPanel tvPanel;
    private javax.swing.JPanel tvSearchPanel;
    private javax.swing.JTextField txtTvAdded;
    private javax.swing.JTextField txtTvId;
    private javax.swing.JTextField txtTvLang;
    private javax.swing.JTextField txtTvSearch;
    private javax.swing.JFormattedTextField txtTvSeason;
    private javax.swing.JTextArea txtTvSin;
    private javax.swing.JTextField txtTvTitle;
    private javax.swing.JTextField txtTvUrl;
    // End of variables declaration//GEN-END:variables

    
}
